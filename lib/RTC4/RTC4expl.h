//-----------------------------------------------------------------------------
//  File: RTC4expl.h                              Copyright (c) 2003 SCANLAB AG
//-----------------------------------------------------------------------------
//
//
//
//  Abstract
//      RTC4 function prototypes for explicitly linking - also known as
//      dynamic load linking - to the RTC4DLL.DLL
//
//  Authors
//      Gerald Schmid, Bernhard Schrems
//
//  Revision History
//      +-----+---------+--------+------------------------------------------+
//      | Mod |  Date   | Author | Description                              |
//      +-----+---------+--------+------------------------------------------+
//      | 0.0 | 15Jan01 | GS, BS | * initial release                        |
//      |     |         |        |                                          |
//      +-----+---------+--------+------------------------------------------+
//
//-----------------------------------------------------------------------------

//------------------------ DLL Handling ---------------------------------------

#if !defined(AFX_SCANNER_H__08060DB8_7C71_4634_AC7C_EBF518F0DE9D__INCLUDED_2)
#define AFX_SCANNER_H__08060DB8_7C71_4634_AC7C_EBF518F0DE9D__INCLUDED_2

#if _MSC_VER > 1000
#pragma once
#endif // _MSC_VER > 1000

#include "Scanner.h"

class AFX_EXT_CLASS RTC4 :public CScanner
{
private:
	unsigned short busy, position;
		
public:
	RTC4(CWnd* pOwner);
	virtual ~RTC4();

//	bool WriteProfile();
//	bool GetProfile();	
	virtual DriverCard GetCardType();	
	virtual	void ResetTimer();
	virtual double GetMarkTime();

	//Control command
	virtual bool SetRTC();
	virtual bool LoadFile(CString filepath);
	virtual void StopExcute();
	virtual bool InitialRTC();
	virtual void WaitForStop();

	virtual WORD GetHeadStatus();
	virtual int GetSerielNr();
	virtual double GetScanField();
	
	virtual void LaserOn();
	virtual void LaserOff();
	virtual void SetPulse(double freq, double pwidth);
	virtual void SetAnalog1(double Volt);
	virtual bool GetBusy();
	virtual UINT GetPosition();
	virtual void GetCurPos();
	virtual void SetTrigger(UINT Period, UINT Signal1,UINT Signal2);
	virtual void MeasurementStatus( UINT* busy, UINT* position );

	virtual void SetOffsetList(double dx, double dy);
	//////////////////////////////////////////////////////////////////////////
	///	List command
	virtual void WaitForListSpace(int iGap);	
	virtual void ExcuteGalvoPara(CLaserPara* pPara, bool bJudge=true, bool bSet=true);
	
	virtual	void StartList();
	virtual void EndOfList(bool bWait=false);
	
	virtual void SetLaserDelays(double dlaserondelay, double dlaseroffdelay);		//laser on and off delays
	virtual void SetScannerDelay(double dmarkdelay, double djumpdelay, double dpolygondelay);	//jump,mark and polygon delays
	virtual void SetJumpSpeed(double djumpspeed);
	virtual void SetMarkSpeed(double dmarkspeed);
	virtual void SetLaserPara(double dfreq, double dpulsewidth); 		//freq, p
	virtual void SetWobbel(double dampl, double dfreq);
	virtual void SPoint(double dx, double dy, double dz,double dtime);
	///	
	virtual void SMarkTo(double dx, double dy);
	virtual void SJumpTo(double dx, double dy);
	virtual void SArcTo(double dx, double dy, double dangle);
	virtual void SMark3DTo(double dx, double dy, double dz);
	virtual void SJump3DTo(double dx, double dy, double dz);
	virtual void SArc3DTo(double dx, double dy, double dz, double dangle);
	virtual void SMarkRelTo(double dx, double dy);
	virtual void SJumpRelTo(double dx, double dy);	
	virtual void SArcRelTo(double dx, double dy, double dangle);
	virtual void SMark3DRelTo(double dx, double dy, double dz);
	virtual void SJump3DRelTo(double dx, double dy, double dz);
	virtual void SArc3DRelTo(double dx, double dy, double dz, double dangle);
	///	
	virtual void SParaMarkTo(double dx, double dy, double dpara){};
	virtual void SParaJumpTo(double dx, double dy, double dpara){};
	virtual void SParaMark3DTo(double dx, double dy, double dz, double dpara){};
	virtual void SParaJump3DTo(double dx, double dy, double dz, double dpara){};
	//microvector
	virtual void SMicroVector(double dx, double dy, double laseron, double laseroff){};
	virtual void SMicroVector3D(double dx, double dy, double dz, double laseron, double laseroff){};
	virtual void SMicroVectorRel(double dx, double dy, double laseron, double laseroff){};
	virtual void SMicroVectorRel3D(double dx, double dy, double dz, double laseron, double laseroff){};
	//Bitmap
	virtual void SSetZPosition(double dz);	
	virtual void SSetPixelLine(int ichanel, double dperiod, double dx, double dy, double dz=0);
	virtual void SSetPixel(double dpulsewidth, double dvoltage, int npixel=1);
	
	//LaserControl
	virtual void SSetLaserOnList(double dt);
	virtual void SSetDelayOnList(double dt);
	//	SAnologOut1List,// power
	virtual void SSetAnologOut1(double dvoltage); 
	virtual void SSetLongDelay(double dt);

//	virtual void SetAutoSpeedPosCtrl()=0;	
	virtual void SetAutoLaserParaList(){};
	virtual void SetAutoVectorCtrl(int ictrl, double dvalue){};
			
	//SkyWriting
	virtual void SSetSkyWritingMode(int imode);
	virtual void SSetSkyWritingPara(double dtimeleg, double dlaseronshift, double nprev, double npost);
	//
	virtual void SListContinue();
	virtual void SSetFirstKiller(double dlength);

	virtual int GetDLLVersion();

private:

//	unsigned short busy, position;
	int RTC4open(HINSTANCE gLibRTC4);

	typedef short (__stdcall *GETMEMORY)(unsigned short adr);
	typedef void (__stdcall *N_GET_WAVEFORM)(unsigned short n, unsigned short channel, unsigned short istop, signed short *memptr);
	typedef void (__stdcall *GET_WAVEFORM)(unsigned short channel, unsigned short istop, signed short *memptr);
	typedef void (__stdcall *N_MEASUREMENT_STATUS)(unsigned short n, unsigned short *busy, unsigned short *position);
	typedef void (__stdcall *MEASUREMENT_STATUS)(unsigned short *busy, unsigned short *position);
	typedef short (__stdcall *N_LOAD_VARPOLYDELAY)(unsigned short n, const char* stbfilename, unsigned short tableno);
	typedef short (__stdcall *LOAD_VARPOLYDELAY)(const char* stbfilename, unsigned short tableno);
	typedef short (__stdcall *N_LOAD_PROGRAM_FILE)(unsigned short n, const char* name);
	typedef short (__stdcall *LOAD_PROGRAM_FILE)(const char* name);
	typedef short (__stdcall *N_LOAD_CORRECTION_FILE)(unsigned short n, const char* filename, short cortable, double kx, double ky, double phi, double xoffset, double yoffset);
	typedef short (__stdcall *LOAD_CORRECTION_FILE)(const char* filename, short cortable, double kx, double ky, double phi, double xoffset, double yoffset);
	typedef short (__stdcall *N_LOAD_Z_TABLE)(unsigned short n, double a, double b, double c);
	typedef short (__stdcall *LOAD_Z_TABLE)(double a, double b, double c);
	typedef void (__stdcall *N_LIST_NOP)(unsigned short n);
	typedef void (__stdcall *LIST_NOP)(void);
	typedef void (__stdcall *N_SET_END_OF_LIST)(unsigned short n);
	typedef void (__stdcall *SET_END_OF_LIST)(void);
	typedef void (__stdcall *N_JUMP_ABS_3D)(unsigned short n, short x, short y, short z);
	typedef void (__stdcall *JUMP_ABS_3D)(short x, short y, short z);
	typedef void (__stdcall *N_JUMP_ABS)(unsigned short n, short x, short y);
	typedef void (__stdcall *JUMP_ABS)(short x, short y);
	typedef void (__stdcall *N_MARK_ABS_3D)(unsigned short n, short x, short y, short z);
	typedef void (__stdcall *MARK_ABS_3D)(short x, short y, short z);
	typedef void (__stdcall *N_MARK_ABS)(unsigned short n, short x, short y);
	typedef void (__stdcall *MARK_ABS)(short x, short y);
	typedef void (__stdcall *N_JUMP_REL_3D)(unsigned short n, short dx, short dy, short dz);
	typedef void (__stdcall *JUMP_REL_3D)(short dx, short dy, short dz);
	typedef void (__stdcall *N_JUMP_REL)(unsigned short n, short dx, short dy);
	typedef void (__stdcall *JUMP_REL)(short dx, short dy);
	typedef void (__stdcall *N_MARK_REL_3D)(unsigned short n, short dx, short dy, short dz);
	typedef void (__stdcall *MARK_REL_3D)(short dx, short dy, short dz);
	typedef void (__stdcall *N_MARK_REL)(unsigned short n, short dx, short dy);
	typedef void (__stdcall *MARK_REL)(short dx, short dy);
	typedef void (__stdcall *N_WRITE_8BIT_PORT_LIST)(unsigned short n, unsigned short value);
	typedef void (__stdcall *WRITE_8BIT_PORT_LIST)(unsigned short value);
	typedef void (__stdcall *N_WRITE_DA_1_LIST)(unsigned short n, unsigned short value);
	typedef void (__stdcall *WRITE_DA_1_LIST)(unsigned short value);
	typedef void (__stdcall *N_WRITE_DA_2_LIST)(unsigned short n, unsigned short value);
	typedef void (__stdcall *WRITE_DA_2_LIST)(unsigned short value);
	typedef void (__stdcall *N_SET_MATRIX_LIST)(unsigned short n, unsigned short i, unsigned short j, double mij);
	typedef void (__stdcall *SET_MATRIX_LIST)(unsigned short i, unsigned short j, double mij);
	typedef void (__stdcall *N_SET_DEFOCUS_LIST)(unsigned short n, short value);
	typedef void (__stdcall *SET_DEFOCUS_LIST)(short value);
	typedef void (__stdcall *N_SET_CONTROL_MODE_LIST)(unsigned short n, unsigned short mode);
	typedef void (__stdcall *SET_CONTROL_MODE_LIST)(unsigned short mode);
	typedef void (__stdcall *N_SET_OFFSET_LIST)(unsigned short n, short xoffset, short yoffset);
	typedef void (__stdcall *SET_OFFSET_LIST)(short xoffset, short yoffset);
	typedef void (__stdcall *N_LONG_DELAY)(unsigned short n, unsigned short value);
	typedef void (__stdcall *LONG_DELAY)(unsigned short value);
	typedef void (__stdcall *N_LASER_ON_LIST)(unsigned short n, unsigned short value);
	typedef void (__stdcall *LASER_ON_LIST)(unsigned short value);
	typedef void (__stdcall *N_SET_JUMP_SPEED)(unsigned short n, double speed);
	typedef void (__stdcall *SET_JUMP_SPEED)(double speed);
	typedef void (__stdcall *N_SET_MARK_SPEED)(unsigned short n, double speed);
	typedef void (__stdcall *SET_MARK_SPEED)(double speed);
	typedef void (__stdcall *N_SET_LASER_DELAYS)(unsigned short n, short ondelay, short offdelay);
	typedef void (__stdcall *SET_LASER_DELAYS)(short ondelay, short offdelay);
	typedef void (__stdcall *N_SET_SCANNER_DELAYS)(unsigned short n, unsigned short jumpdelay, unsigned short markdelay, unsigned short polydelay);
	typedef void (__stdcall *SET_SCANNER_DELAYS)(unsigned short jumpdelay, unsigned short markdelay, unsigned short polydelay);
	typedef void (__stdcall *N_SET_LIST_JUMP)(unsigned short n, unsigned short position);
	typedef void (__stdcall *SET_LIST_JUMP)(unsigned short position);
	typedef void (__stdcall *N_SET_INPUT_POINTER)(unsigned short n, unsigned short pointer);
	typedef void (__stdcall *SET_INPUT_POINTER)(unsigned short pointer);
	typedef void (__stdcall *N_LIST_CALL)(unsigned short n, unsigned short position);
	typedef void (__stdcall *LIST_CALL)(unsigned short position);
	typedef void (__stdcall *N_LIST_RETURN)(unsigned short n);
	typedef void (__stdcall *LIST_RETURN)(void);
	typedef void (__stdcall *N_Z_OUT_LIST)(unsigned short n, short z);
	typedef void (__stdcall *Z_OUT_LIST)(short z);
	typedef void (__stdcall *N_SET_STANDBY_LIST)(unsigned short n, unsigned short half_period, unsigned short pulse);
	typedef void (__stdcall *SET_STANDBY_LIST)(unsigned short half_period, unsigned short pulse);
	typedef void (__stdcall *N_TIMED_JUMP_ABS)(unsigned short n, short x, short y, double time);
	typedef void (__stdcall *TIMED_JUMP_ABS)(short x, short y, double time);
	typedef void (__stdcall *N_TIMED_MARK_ABS)(unsigned short n, short x, short y, double time);
	typedef void (__stdcall *TIMED_MARK_ABS)(short x, short y, double time);
	typedef void (__stdcall *N_TIMED_JUMP_REL)(unsigned short n, short dx, short dy, double time);
	typedef void (__stdcall *TIMED_JUMP_REL)(short dx, short dy, double time);
	typedef void (__stdcall *N_TIMED_MARK_REL)(unsigned short n, short dx, short dy, double time);
	typedef void (__stdcall *TIMED_MARK_REL)(short dx, short dy, double time);
	typedef void (__stdcall *N_SET_LASER_TIMING)(unsigned short n, unsigned short halfperiod, unsigned short pulse1, unsigned short pulse2, unsigned short timebase);
	typedef void (__stdcall *SET_LASER_TIMING)(unsigned short halfperiod, unsigned short pulse1, unsigned short pulse2, unsigned short timebase);
	typedef void (__stdcall *N_SET_WOBBEL_XY)(unsigned short n, unsigned short long_wob, unsigned short trans_wob, double frequency);
	typedef void (__stdcall *SET_WOBBEL_XY)(unsigned short long_wob, unsigned short trans_wob, double frequency);
	typedef void (__stdcall *N_SET_WOBBEL)(unsigned short n, unsigned short amplitude, double frequency);
	typedef void (__stdcall *SET_WOBBEL)(unsigned short amplitude, double frequency);
	typedef void (__stdcall *N_SET_FLY_X)(unsigned short n, double kx);
	typedef void (__stdcall *SET_FLY_X)(double kx);
	typedef void (__stdcall *N_SET_FLY_Y)(unsigned short n, double ky);
	typedef void (__stdcall *SET_FLY_Y)(double ky);
	typedef void (__stdcall *N_SET_FLY_ROT)(unsigned short n, double resolution);
	typedef void (__stdcall *SET_FLY_ROT)(double resolution);
	typedef void (__stdcall *N_FLY_RETURN)(unsigned short n, short x, short y);
	typedef void (__stdcall *FLY_RETURN)(short x, short y);
	typedef void (__stdcall *N_CALCULATE_FLY)(unsigned short n, unsigned short direction, double distance);
	typedef void (__stdcall *CALCULATE_FLY)(unsigned short direction, double distance);
	typedef void (__stdcall *N_WRITE_IO_PORT_LIST)(unsigned short n, unsigned short value);
	typedef void (__stdcall *WRITE_IO_PORT_LIST)(unsigned short value);
	typedef void (__stdcall *N_SELECT_COR_TABLE_LIST)(unsigned short n, unsigned short heada, unsigned short headb);
	typedef void (__stdcall *SELECT_COR_TABLE_LIST)(unsigned short heada, unsigned short headb);
	typedef void (__stdcall *N_SET_WAIT)(unsigned short n, unsigned short value);
	typedef void (__stdcall *SET_WAIT)(unsigned short value);
	typedef void (__stdcall *N_SIMULATE_EXT_START)(unsigned short n, short delay, short encoder);
	typedef void (__stdcall *SIMULATE_EXT_START)(short delay, short encoder);
	typedef void (__stdcall *N_WRITE_DA_X_LIST)(unsigned short n, unsigned short x, unsigned short value);
	typedef void (__stdcall *WRITE_DA_X_LIST)(unsigned short x, unsigned short value);
	typedef void (__stdcall *N_SET_PIXEL_LINE)(unsigned short n, unsigned short pixelmode, unsigned short pixelperiod, double dx, double dy);
	typedef void (__stdcall *SET_PIXEL_LINE)(unsigned short pixelmode, unsigned short pixelperiod, double dx, double dy);
	typedef void (__stdcall *N_SET_PIXEL)(unsigned short n, unsigned short pulswidth, unsigned short davalue, unsigned short adchannel);
	typedef void (__stdcall *SET_PIXEL)(unsigned short pulswidth, unsigned short davalue, unsigned short adchannel);
	typedef void (__stdcall *N_SET_EXTSTARTPOS_LIST)(unsigned short n, unsigned short position);
	typedef void (__stdcall *SET_EXTSTARTPOS_LIST)(unsigned short position);
	typedef void (__stdcall *N_LASER_SIGNAL_ON_LIST)(unsigned short n);
	typedef void (__stdcall *LASER_SIGNAL_ON_LIST)(void);
	typedef void (__stdcall *N_LASER_SIGNAL_OFF_LIST)(unsigned short n);
	typedef void (__stdcall *LASER_SIGNAL_OFF_LIST)(void);
	typedef void (__stdcall *N_SET_FIRSTPULSE_KILLER_LIST)(unsigned short n, unsigned short fpk);
	typedef void (__stdcall *SET_FIRSTPULSE_KILLER_LIST)(unsigned short fpk);
	typedef void (__stdcall *N_SET_IO_COND_LIST)(unsigned short n, unsigned short mask_1, unsigned short mask_0, unsigned short mask_set);
	typedef void (__stdcall *SET_IO_COND_LIST)(unsigned short mask_1, unsigned short mask_0, unsigned short mask_set);
	typedef void (__stdcall *N_CLEAR_IO_COND_LIST)(unsigned short n, unsigned short mask_1, unsigned short mask_0, unsigned short mask_clear);
	typedef void (__stdcall *CLEAR_IO_COND_LIST)(unsigned short mask_1, unsigned short mask_0, unsigned short mask_clear);
	typedef void (__stdcall *N_LIST_JUMP_COND)(unsigned short n, unsigned short mask_1, unsigned short mask_0, unsigned short position);
	typedef void (__stdcall *LIST_JUMP_COND)(unsigned short mask_1, unsigned short mask_0, unsigned short position);
	typedef void (__stdcall *N_LIST_CALL_COND)(unsigned short n, unsigned short mask_1, unsigned short mask_0, unsigned short position);
	typedef void (__stdcall *LIST_CALL_COND)(unsigned short mask_1, unsigned short mask_0, unsigned short position);
	typedef void (__stdcall *N_SAVE_AND_RESTART_TIMER)(unsigned short n);
	typedef void (__stdcall *SAVE_AND_RESTART_TIMER)(void);
	typedef void (__stdcall *N_SET_EXT_START_DELAY_LIST)(unsigned short n, short delay, short encoder);
	typedef void (__stdcall *SET_EXT_START_DELAY_LIST)(short delay, short encoder);
	typedef void (__stdcall *N_SET_TRIGGER)(unsigned short n, unsigned short sampleperiod, unsigned short channel1, unsigned short channel2);
	typedef void (__stdcall *SET_TRIGGER)(unsigned short sampleperiod, unsigned short signal1, unsigned short signal2);
	typedef void (__stdcall *N_ARC_REL)(unsigned short n, short dx, short dy, double angle);
	typedef void (__stdcall *ARC_REL)(short dx, short dy, double angle);
	typedef void (__stdcall *N_ARC_ABS)(unsigned short n, short x, short y, double angle);
	typedef void (__stdcall *ARC_ABS)(short x, short y, double angle);
	typedef void (__stdcall *DRILLING)(short pulsewidth, short relencoderdelay);
	typedef void (__stdcall *REGULATION)(void);
	typedef void (__stdcall *FLYLINE)(short encoderdelay);
	typedef unsigned short (__stdcall *N_GET_INPUT_POINTER)(unsigned short n);
	typedef unsigned short (__stdcall *GET_INPUT_POINTER)(void);
	typedef void (__stdcall *SELECT_RTC)(unsigned short cardno);
	typedef unsigned short (__stdcall *RTC4_COUNT_CARDS)(void);
	typedef void (__stdcall *N_GET_STATUS)(unsigned short n, unsigned short *busy, unsigned short *position);
	typedef void (__stdcall *GET_STATUS)(unsigned short *busy, unsigned short *position);
	typedef unsigned short (__stdcall *N_READ_STATUS)(unsigned short n);
	typedef unsigned short (__stdcall *READ_STATUS)(void);
	typedef unsigned short (__stdcall *N_GET_STARTSTOP_INFO)(unsigned short n);
	typedef unsigned short (__stdcall *GET_STARTSTOP_INFO)(void);
	typedef unsigned short (__stdcall *N_GET_MARKING_INFO)(unsigned short n);
	typedef unsigned short (__stdcall *GET_MARKING_INFO)(void);
	typedef unsigned short (__stdcall *GET_DLL_VERSION)(void);
	typedef void (__stdcall *N_SET_START_LIST_1)(unsigned short n);
	typedef void (__stdcall *SET_START_LIST_1)(void);
	typedef void (__stdcall *N_SET_START_LIST_2)(unsigned short n);
	typedef void (__stdcall *SET_START_LIST_2)(void);
	typedef void (__stdcall *N_SET_START_LIST)(unsigned short n, unsigned short listno);
	typedef void (__stdcall *SET_START_LIST)(unsigned short listno);
	typedef void (__stdcall *N_EXECUTE_LIST_1)(unsigned short n);
	typedef void (__stdcall *EXECUTE_LIST_1)(void);
	typedef void (__stdcall *N_EXECUTE_LIST_2)(unsigned short n);
	typedef void (__stdcall *EXECUTE_LIST_2)(void);
	typedef void (__stdcall *N_EXECUTE_LIST)(unsigned short n, unsigned short listno);
	typedef void (__stdcall *EXECUTE_LIST)(unsigned short listno);
	typedef void (__stdcall *N_WRITE_8BIT_PORT)(unsigned short n, unsigned short value);
	typedef void (__stdcall *WRITE_8BIT_PORT)(unsigned short value);
	typedef void (__stdcall *N_WRITE_IO_PORT)(unsigned short n, unsigned short value);
	typedef void (__stdcall *WRITE_IO_PORT)(unsigned short value);
	typedef void (__stdcall *N_AUTO_CHANGE)(unsigned short n);
	typedef void (__stdcall *AUTO_CHANGE)(void);
	typedef void (__stdcall *N_AUTO_CHANGE_POS)(unsigned short n, unsigned short start);
	typedef void (__stdcall *AUTO_CHANGE_POS)(unsigned short start);
	typedef void (__stdcall *AUT_CHANGE)(void);
	typedef void (__stdcall *N_START_LOOP)(unsigned short n);
	typedef void (__stdcall *START_LOOP)(void);
	typedef void (__stdcall *N_QUIT_LOOP)(unsigned short n);
	typedef void (__stdcall *QUIT_LOOP)(void);
	typedef void (__stdcall *N_SET_LIST_MODE)(unsigned short n, unsigned short mode);
	typedef void (__stdcall *SET_LIST_MODE)(unsigned short mode);
	typedef void (__stdcall *N_STOP_EXECUTION)(unsigned short n);
	typedef void (__stdcall *STOP_EXECUTION)(void);
	typedef unsigned short (__stdcall *N_READ_IO_PORT)(unsigned short n);
	typedef unsigned short (__stdcall *READ_IO_PORT)(void);
	typedef void (__stdcall *N_WRITE_DA_1)(unsigned short n, unsigned short value);
	typedef void (__stdcall *WRITE_DA_1)(unsigned short value);
	typedef void (__stdcall *N_WRITE_DA_2)(unsigned short n, unsigned short value);
	typedef void (__stdcall *WRITE_DA_2)(unsigned short value);
	typedef void (__stdcall *N_SET_MAX_COUNTS)(unsigned short n, long counts);
	typedef void (__stdcall *SET_MAX_COUNTS)(long counts);
	typedef long (__stdcall *N_GET_COUNTS)(unsigned short n);
	typedef long (__stdcall *GET_COUNTS)(void);
	typedef void (__stdcall *N_SET_MATRIX)(unsigned short n, double m11, double m12, double m21, double m22);
	typedef void (__stdcall *SET_MATRIX)(double m11, double m12, double m21, double m22);
	typedef void (__stdcall *N_SET_OFFSET)(unsigned short n, short xoffset, short yoffset);
	typedef void (__stdcall *SET_OFFSET)(short xoffset, short yoffset);
	typedef void (__stdcall *N_GOTO_XYZ)(unsigned short n, short x, short y, short z);
	typedef void (__stdcall *GOTO_XYZ)(short x, short y, short z);
	typedef void (__stdcall *N_GOTO_XY)(unsigned short n, short x, short y);
	typedef void (__stdcall *GOTO_XY)(short x, short y);
	typedef unsigned short (__stdcall *N_GET_HEX_VERSION)(unsigned short n);
	typedef unsigned short (__stdcall *GET_HEX_VERSION)(void);
	typedef void (__stdcall *N_DISABLE_LASER)(unsigned short n);
	typedef void (__stdcall *DISABLE_LASER)(void);
	typedef void (__stdcall *N_ENABLE_LASER)(unsigned short n);
	typedef void (__stdcall *ENABLE_LASER)(void);
	typedef void (__stdcall *N_STOP_LIST)(unsigned short n);
	typedef void (__stdcall *STOP_LIST)(void);
	typedef void (__stdcall *N_RESTART_LIST)(unsigned short n);
	typedef void (__stdcall *RESTART_LIST)(void);
	typedef void (__stdcall *N_GET_XYZ_POS)(unsigned short n, short *x, short *y, short *z);
	typedef void (__stdcall *GET_XYZ_POS)(short *x, short *y, short *z);
	typedef void (__stdcall *N_GET_XY_POS)(unsigned short n, short *x, short *y);
	typedef void (__stdcall *GET_XY_POS)(short *x, short *y);
	typedef void (__stdcall *N_SELECT_LIST)(unsigned short n, unsigned short list_2);
	typedef void (__stdcall *SELECT_LIST)(unsigned short list_2);
	typedef void (__stdcall *N_Z_OUT)(unsigned short n, short z);
	typedef void (__stdcall *Z_OUT)(short z);
	typedef void (__stdcall *N_SET_FIRSTPULSE_KILLER)(unsigned short n, unsigned short fpk);
	typedef void (__stdcall *SET_FIRSTPULSE_KILLER)(unsigned short fpk);
	typedef void (__stdcall *N_SET_STANDBY)(unsigned short n, unsigned short half_period, unsigned short pulse);
	typedef void (__stdcall *SET_STANDBY)(unsigned short half_period, unsigned short pulse);
	typedef void (__stdcall *N_LASER_SIGNAL_ON)(unsigned short n);
	typedef void (__stdcall *LASER_SIGNAL_ON)(void);
	typedef void (__stdcall *N_LASER_SIGNAL_OFF)(unsigned short n);
	typedef void (__stdcall *LASER_SIGNAL_OFF)(void);
	typedef void (__stdcall *N_SET_DELAY_MODE)(unsigned short n, unsigned short varpoly, unsigned short directmove3d, unsigned short edgelevel, unsigned short minjumpdelay, unsigned short jumplengthlimit);
	typedef void (__stdcall *SET_DELAY_MODE)(unsigned short varpoly, unsigned short directmove3d, unsigned short edgelevel, unsigned short minjumpdelay, unsigned short jumplengthlimit);
	typedef void (__stdcall *N_SET_PISO_CONTROL)(unsigned short n, unsigned short l1, unsigned short l2);
	typedef void (__stdcall *SET_PISO_CONTROL)(unsigned short l1, unsigned short l2);
	typedef void (__stdcall *N_SELECT_STATUS)(unsigned short n, unsigned short mode);
	typedef void (__stdcall *SELECT_STATUS)(unsigned short mode);
	typedef void (__stdcall *N_GET_ENCODER)(unsigned short n, short *zx, short *zy);
	typedef void (__stdcall *GET_ENCODER)(short *zx, short *zy);
	typedef void (__stdcall *N_SELECT_COR_TABLE)(unsigned short n, unsigned short heada, unsigned short headb);
	typedef void (__stdcall *SELECT_COR_TABLE)(unsigned short heada, unsigned short headb);
	typedef void (__stdcall *N_EXECUTE_AT_POINTER)(unsigned short n, unsigned short position);
	typedef void (__stdcall *EXECUTE_AT_POINTER)(unsigned short position);
	typedef unsigned short (__stdcall *N_GET_HEAD_STATUS)(unsigned short n, unsigned short head);
	typedef unsigned short (__stdcall *GET_HEAD_STATUS)(unsigned short head);
	typedef void (__stdcall *N_SIMULATE_ENCODER)(unsigned short n, unsigned short channel);
	typedef void (__stdcall *SIMULATE_ENCODER)(unsigned short channel);
	typedef void (__stdcall *N_SET_HI)(unsigned short n, double galvogainx, double galvogainy, short galvooffsetx, short galvooffsety, short head);
	typedef void (__stdcall *SET_HI)(double galvogainx, double galvogainy, short galvooffsetx, short galvooffsety, short head);
	typedef void (__stdcall *N_RELEASE_WAIT)(unsigned short n);
	typedef void (__stdcall *RELEASE_WAIT)(void);
	typedef unsigned short (__stdcall *N_GET_WAIT_STATUS)(unsigned short n);
	typedef unsigned short (__stdcall *GET_WAIT_STATUS)(void);
	typedef void (__stdcall *N_SET_CONTROL_MODE)(unsigned short n, unsigned short mode);
	typedef void (__stdcall *SET_CONTROL_MODE)(unsigned short mode);
	typedef void (__stdcall *N_SET_LASER_MODE)(unsigned short n, unsigned short mode);
	typedef void (__stdcall *SET_LASER_MODE)(unsigned short mode);
	typedef void (__stdcall *N_SET_EXT_START_DELAY)(unsigned short n, short delay, short encoder);
	typedef void (__stdcall *SET_EXT_START_DELAY)(short delay, short encoder);
	typedef void (__stdcall *N_HOME_POSITION)(unsigned short n, short xhome, short yhome);
	typedef void (__stdcall *HOME_POSITION)(short xhome, short yhome);
	typedef void (__stdcall *N_SET_ROT_CENTER)(unsigned short n, long center_x, long center_y);
	typedef void (__stdcall *SET_ROT_CENTER)(long center_x, long center_y);
	typedef void (__stdcall *N_DSP_START)(unsigned short n);
	typedef void (__stdcall *DSP_START)(void);
	typedef void (__stdcall *N_WRITE_DA_X)(unsigned short n, unsigned short x, unsigned short value);
	typedef void (__stdcall *WRITE_DA_X)(unsigned short x, unsigned short value);
	typedef unsigned short (__stdcall *N_READ_AD_X)(unsigned short n, unsigned short x);
	typedef unsigned short (__stdcall *READ_AD_X)(unsigned short x);
	typedef unsigned short (__stdcall *N_READ_PIXEL_AD)(unsigned short n, unsigned short pos);
	typedef unsigned short (__stdcall *READ_PIXEL_AD)(unsigned short pos);
	typedef short (__stdcall *N_GET_Z_DISTANCE)(unsigned short n, short x, short y, short z);
	typedef short (__stdcall *GET_Z_DISTANCE)(short x, short y, short z);
	typedef unsigned short (__stdcall *N_GET_IO_STATUS)(unsigned short n);
	typedef unsigned short (__stdcall *GET_IO_STATUS)(void);
	typedef double (__stdcall *N_GET_TIME)(unsigned short n);
	typedef double (__stdcall *GET_TIME)(void);
	typedef void (__stdcall *N_SET_DEFOCUS)(unsigned short n, short value);
	typedef void (__stdcall *SET_DEFOCUS)(short value);
	typedef void (__stdcall *N_SET_SOFTSTART_MODE)(unsigned short n, unsigned short mode, unsigned short number, unsigned short restartdelay);
	typedef void (__stdcall *SET_SOFTSTART_MODE)(unsigned short mode, unsigned short number, unsigned short resetdelay);
	typedef void (__stdcall *N_SET_SOFTSTART_LEVEL)(unsigned short n, unsigned short index, unsigned short level);
	typedef void (__stdcall *SET_SOFTSTART_LEVEL)(unsigned short index, unsigned short level);
	typedef void (__stdcall *N_CONTROL_COMMAND)(unsigned short n, unsigned short head, unsigned short axis, unsigned short data);
	typedef void (__stdcall *CONTROL_COMMAND)(unsigned short head, unsigned short axis, unsigned short data);
	typedef short (__stdcall *LOAD_COR)(const char* filename);
	typedef short (__stdcall *LOAD_PRO)(const char* filename);
	typedef unsigned short (__stdcall *N_GET_SERIAL_NUMBER)(unsigned short n);
	typedef unsigned short (__stdcall *GET_SERIAL_NUMBER)(void);
	typedef unsigned short (__stdcall *N_GET_RTC_VERSION)(unsigned short n);
	typedef unsigned short (__stdcall *GET_RTC_VERSION)(void);
	typedef void (__stdcall *GET_HI_DATA)(unsigned short *x1, unsigned short *x2, unsigned short *y1, unsigned short *y2);
	typedef short (__stdcall *N_AUTO_CAL)(unsigned short n, unsigned short head, unsigned short command);
	typedef short (__stdcall *AUTO_CAL)(unsigned short head, unsigned short command);
	typedef unsigned short (__stdcall *N_GET_LIST_SPACE)(unsigned short n);
	typedef unsigned short (__stdcall *GET_LIST_SPACE)(void);
	typedef short (__stdcall *TEACHIN)(const char* filename, short xin, short yin, short zin, double ll0, short *xout, short *yout, short *zout);
	typedef short (__stdcall *N_GET_VALUE)(unsigned short n, unsigned short signal);
	typedef short (__stdcall *GET_VALUE)(unsigned short signal);
	typedef void (__stdcall *N_SET_IO_BIT)(unsigned short n, unsigned short mask1);
	typedef void (__stdcall *SET_IO_BIT)(unsigned short mask1);
	typedef void (__stdcall *N_CLEAR_IO_BIT)(unsigned short n, unsigned short mask0);
	typedef void (__stdcall *CLEAR_IO_BIT)(unsigned short mask0);
	typedef void (__stdcall *SET_DUTY_CYCLE_TABLE)(unsigned short index, unsigned short dutycycle);
	typedef void (__stdcall *N_MOVE_TO)(unsigned short n, unsigned short position);
	typedef void (__stdcall *MOVE_TO)(unsigned short position);

	 GETMEMORY getmemory;
	 N_GET_WAVEFORM n_get_waveform;
	 GET_WAVEFORM get_waveform;
	 N_MEASUREMENT_STATUS n_measurement_status;
	 MEASUREMENT_STATUS measurement_status;
	 N_LOAD_VARPOLYDELAY n_load_varpolydelay;
	 LOAD_VARPOLYDELAY load_varpolydelay;
	 N_LOAD_PROGRAM_FILE n_load_program_file;
	 LOAD_PROGRAM_FILE load_program_file;
	 N_LOAD_CORRECTION_FILE n_load_correction_file;
	 LOAD_CORRECTION_FILE load_correction_file;
	 N_LOAD_Z_TABLE n_load_z_table;
	 LOAD_Z_TABLE load_z_table;
	 N_LIST_NOP n_list_nop;
	 LIST_NOP list_nop;
	 N_SET_END_OF_LIST n_set_end_of_list;
	 SET_END_OF_LIST set_end_of_list;
	 N_JUMP_ABS_3D n_jump_abs_3d;
	 JUMP_ABS_3D jump_abs_3d;
	 N_JUMP_ABS n_jump_abs;
	 JUMP_ABS jump_abs;
	 N_MARK_ABS_3D n_mark_abs_3d;
	 MARK_ABS_3D mark_abs_3d;
	 N_MARK_ABS n_mark_abs;
	 MARK_ABS mark_abs;
	 N_JUMP_REL_3D n_jump_rel_3d;
	 JUMP_REL_3D jump_rel_3d;
	 N_JUMP_REL n_jump_rel;
	 JUMP_REL jump_rel;
	 N_MARK_REL_3D n_mark_rel_3d;
	 MARK_REL_3D mark_rel_3d;
	 N_MARK_REL n_mark_rel;
	 MARK_REL mark_rel;
	 N_WRITE_8BIT_PORT_LIST n_write_8bit_port_list;
	 WRITE_8BIT_PORT_LIST write_8bit_port_list;
	 N_WRITE_DA_1_LIST n_write_da_1_list;
	 WRITE_DA_1_LIST write_da_1_list;
	 N_WRITE_DA_2_LIST n_write_da_2_list;
	 WRITE_DA_2_LIST write_da_2_list;
	 N_SET_MATRIX_LIST n_set_matrix_list;
	 SET_MATRIX_LIST set_matrix_list;
	 N_SET_DEFOCUS_LIST n_set_defocus_list;
	 SET_DEFOCUS_LIST set_defocus_list;
	 N_SET_CONTROL_MODE_LIST n_set_control_mode_list;
	 SET_CONTROL_MODE_LIST set_control_mode_list;
	 N_SET_OFFSET_LIST n_set_offset_list;
	 SET_OFFSET_LIST set_offset_list;
	 N_LONG_DELAY n_long_delay;
	 LONG_DELAY long_delay;
	 N_LASER_ON_LIST n_laser_on_list;
	 LASER_ON_LIST laser_on_list;
	 N_SET_JUMP_SPEED n_set_jump_speed;
	 SET_JUMP_SPEED set_jump_speed;
	 N_SET_MARK_SPEED n_set_mark_speed;
	 SET_MARK_SPEED set_mark_speed;
	 N_SET_LASER_DELAYS n_set_laser_delays;
	 SET_LASER_DELAYS set_laser_delays;
	 N_SET_SCANNER_DELAYS n_set_scanner_delays;
	 SET_SCANNER_DELAYS set_scanner_delays;
	 N_SET_LIST_JUMP n_set_list_jump;
	 SET_LIST_JUMP set_list_jump;
	 N_SET_INPUT_POINTER n_set_input_pointer;
	 SET_INPUT_POINTER set_input_pointer;
	 N_LIST_CALL n_list_call;
	 LIST_CALL list_call;
	 N_LIST_RETURN n_list_return;
	 LIST_RETURN list_return;
	 N_Z_OUT_LIST n_z_out_list;
	 Z_OUT_LIST z_out_list;
	 N_SET_STANDBY_LIST n_set_standby_list;
	 SET_STANDBY_LIST set_standby_list;
	 N_TIMED_JUMP_ABS n_timed_jump_abs;
	 TIMED_JUMP_ABS timed_jump_abs;
	 N_TIMED_MARK_ABS n_timed_mark_abs;
	 TIMED_MARK_ABS timed_mark_abs;
	 N_TIMED_JUMP_REL n_timed_jump_rel;
	 TIMED_JUMP_REL timed_jump_rel;
	 N_TIMED_MARK_REL n_timed_mark_rel;
	 TIMED_MARK_REL timed_mark_rel;
	 N_SET_LASER_TIMING n_set_laser_timing;
	 SET_LASER_TIMING set_laser_timing;
	 N_SET_WOBBEL_XY n_set_wobbel_xy;
	 SET_WOBBEL_XY set_wobbel_xy;
	 N_SET_WOBBEL n_set_wobbel;
	 SET_WOBBEL set_wobbel;
	 N_SET_FLY_X n_set_fly_x;
	 SET_FLY_X set_fly_x;
	 N_SET_FLY_Y n_set_fly_y;
	 SET_FLY_Y set_fly_y;
	 N_SET_FLY_ROT n_set_fly_rot;
	 SET_FLY_ROT set_fly_rot;
	 N_FLY_RETURN n_fly_return;
	 FLY_RETURN fly_return;
	 N_CALCULATE_FLY n_calculate_fly;
	 CALCULATE_FLY calculate_fly;
	 N_WRITE_IO_PORT_LIST n_write_io_port_list;
	 WRITE_IO_PORT_LIST write_io_port_list;
	 N_SELECT_COR_TABLE_LIST n_select_cor_table_list;
	 SELECT_COR_TABLE_LIST select_cor_table_list;
	 N_SET_WAIT n_set_wait;
	 SET_WAIT set_wait;
	 N_SIMULATE_EXT_START n_simulate_ext_start;
	 SIMULATE_EXT_START simulate_ext_start;
	 N_WRITE_DA_X_LIST n_write_da_x_list;
	 WRITE_DA_X_LIST write_da_x_list;
	 N_SET_PIXEL_LINE n_set_pixel_line;
	 SET_PIXEL_LINE set_pixel_line;
	 N_SET_PIXEL n_set_pixel;
	 SET_PIXEL set_pixel;
	 N_SET_EXTSTARTPOS_LIST n_set_extstartpos_list;
	 SET_EXTSTARTPOS_LIST set_extstartpos_list;
	 N_LASER_SIGNAL_ON_LIST n_laser_signal_on_list;
	 LASER_SIGNAL_ON_LIST laser_signal_on_list;
	 N_LASER_SIGNAL_OFF_LIST n_laser_signal_off_list;
	 LASER_SIGNAL_OFF_LIST laser_signal_off_list;
	 N_SET_FIRSTPULSE_KILLER_LIST n_set_firstpulse_killer_list;
	 SET_FIRSTPULSE_KILLER_LIST set_firstpulse_killer_list;
	 N_SET_IO_COND_LIST n_set_io_cond_list;
	 SET_IO_COND_LIST set_io_cond_list;
	 N_CLEAR_IO_COND_LIST n_clear_io_cond_list;
	 CLEAR_IO_COND_LIST clear_io_cond_list;
	 N_LIST_JUMP_COND n_list_jump_cond;
	 LIST_JUMP_COND list_jump_cond;
	 N_LIST_CALL_COND n_list_call_cond;
	 LIST_CALL_COND list_call_cond;
	 N_SAVE_AND_RESTART_TIMER n_save_and_restart_timer;
	 SAVE_AND_RESTART_TIMER save_and_restart_timer;
	 N_SET_EXT_START_DELAY_LIST n_set_ext_start_delay_list;
	 SET_EXT_START_DELAY_LIST set_ext_start_delay_list;
	 N_SET_TRIGGER n_set_trigger;
	 SET_TRIGGER set_trigger;
	 N_ARC_REL n_arc_rel;
	 ARC_REL arc_rel;
	 N_ARC_ABS n_arc_abs;
	 ARC_ABS arc_abs;
	 DRILLING drilling;
	 REGULATION regulation;
	 FLYLINE flyline;
	 N_GET_INPUT_POINTER n_get_input_pointer;
	 GET_INPUT_POINTER get_input_pointer;
	 SELECT_RTC select_rtc;
	 RTC4_COUNT_CARDS rtc4_count_cards;
	 N_GET_STATUS n_get_status;
	 GET_STATUS get_status;
	 N_READ_STATUS n_read_status;
	 READ_STATUS read_status;
	 N_GET_STARTSTOP_INFO n_get_startstop_info;
	 GET_STARTSTOP_INFO get_startstop_info;
	 N_GET_MARKING_INFO n_get_marking_info;
	 GET_MARKING_INFO get_marking_info;
	 GET_DLL_VERSION get_dll_version;
	 N_SET_START_LIST_1 n_set_start_list_1;
	 SET_START_LIST_1 set_start_list_1;
	 N_SET_START_LIST_2 n_set_start_list_2;
	 SET_START_LIST_2 set_start_list_2;
	 N_SET_START_LIST n_set_start_list;
	 SET_START_LIST set_start_list;
	 N_EXECUTE_LIST_1 n_execute_list_1;
	 EXECUTE_LIST_1 execute_list_1;
	 N_EXECUTE_LIST_2 n_execute_list_2;
	 EXECUTE_LIST_2 execute_list_2;
	 N_EXECUTE_LIST n_execute_list;
	 EXECUTE_LIST execute_list;
	 N_WRITE_8BIT_PORT n_write_8bit_port;
	 WRITE_8BIT_PORT write_8bit_port;
	 N_WRITE_IO_PORT n_write_io_port;
	 WRITE_IO_PORT write_io_port;
	 N_AUTO_CHANGE n_auto_change;
	 AUTO_CHANGE auto_change;
	 N_AUTO_CHANGE_POS n_auto_change_pos;
	 AUTO_CHANGE_POS auto_change_pos;
	 AUT_CHANGE aut_change;
	 N_START_LOOP n_start_loop;
	 START_LOOP start_loop;
	 N_QUIT_LOOP n_quit_loop;
	 QUIT_LOOP quit_loop;
	 N_SET_LIST_MODE n_set_list_mode;
	 SET_LIST_MODE set_list_mode;
	 N_STOP_EXECUTION n_stop_execution;
	 STOP_EXECUTION stop_execution;
	 N_READ_IO_PORT n_read_io_port;
	 READ_IO_PORT read_io_port;
	 N_WRITE_DA_1 n_write_da_1;
	 WRITE_DA_1 write_da_1;
	 N_WRITE_DA_2 n_write_da_2;
	 WRITE_DA_2 write_da_2;
	 N_SET_MAX_COUNTS n_set_max_counts;
	 SET_MAX_COUNTS set_max_counts;
	 N_GET_COUNTS n_get_counts;
	 GET_COUNTS get_counts;
	 N_SET_MATRIX n_set_matrix;
	 SET_MATRIX set_matrix;
	 N_SET_OFFSET n_set_offset;
	 SET_OFFSET set_offset;
	 N_GOTO_XYZ n_goto_xyz;
	 GOTO_XYZ goto_xyz;
	 N_GOTO_XY n_goto_xy;
	 GOTO_XY goto_xy;
	 N_GET_HEX_VERSION n_get_hex_version;
	 GET_HEX_VERSION get_hex_version;
	 N_DISABLE_LASER n_disable_laser;
	 DISABLE_LASER disable_laser;
	 N_ENABLE_LASER n_enable_laser;
	 ENABLE_LASER enable_laser;
	 N_STOP_LIST n_stop_list;
	 STOP_LIST stop_list;
	 N_RESTART_LIST n_restart_list;
	 RESTART_LIST restart_list;
	 N_GET_XYZ_POS n_get_xyz_pos;
	 GET_XYZ_POS get_xyz_pos;
	 N_GET_XY_POS n_get_xy_pos;
	 GET_XY_POS get_xy_pos;
	 N_SELECT_LIST n_select_list;
	 SELECT_LIST select_list;
	 N_Z_OUT n_z_out;
	 Z_OUT z_out;
	 N_SET_FIRSTPULSE_KILLER n_set_firstpulse_killer;
	 SET_FIRSTPULSE_KILLER set_firstpulse_killer;
	 N_SET_STANDBY n_set_standby;
	 SET_STANDBY set_standby;
	 N_LASER_SIGNAL_ON n_laser_signal_on;
	 LASER_SIGNAL_ON laser_signal_on;
	 N_LASER_SIGNAL_OFF n_laser_signal_off;
	 LASER_SIGNAL_OFF laser_signal_off;
	 N_SET_DELAY_MODE n_set_delay_mode;
	 SET_DELAY_MODE set_delay_mode;
	 N_SET_PISO_CONTROL n_set_piso_control;
	 SET_PISO_CONTROL set_piso_control;
	 N_SELECT_STATUS n_select_status;
	 SELECT_STATUS select_status;
	 N_GET_ENCODER n_get_encoder;
	 GET_ENCODER get_encoder;
	 N_SELECT_COR_TABLE n_select_cor_table;
	 SELECT_COR_TABLE select_cor_table;
	 N_EXECUTE_AT_POINTER n_execute_at_pointer;
	 EXECUTE_AT_POINTER execute_at_pointer;
	 N_GET_HEAD_STATUS n_get_head_status;
	 GET_HEAD_STATUS get_head_status;
	 N_SIMULATE_ENCODER n_simulate_encoder;
	 SIMULATE_ENCODER simulate_encoder;
	 N_SET_HI n_set_hi;
	 SET_HI set_hi;
	 N_RELEASE_WAIT n_release_wait;
	 RELEASE_WAIT release_wait;
	 N_GET_WAIT_STATUS n_get_wait_status;
	 GET_WAIT_STATUS get_wait_status;
	 N_SET_CONTROL_MODE n_set_control_mode;
	 SET_CONTROL_MODE set_control_mode;
	 N_SET_LASER_MODE n_set_laser_mode;
	 SET_LASER_MODE set_laser_mode;
	 N_SET_EXT_START_DELAY n_set_ext_start_delay;
	 SET_EXT_START_DELAY set_ext_start_delay;
	 N_HOME_POSITION n_home_position;
	 HOME_POSITION home_position;
	 N_SET_ROT_CENTER n_set_rot_center;
	 SET_ROT_CENTER set_rot_center;
	 N_DSP_START n_dsp_start;
	 DSP_START dsp_start;
	 N_WRITE_DA_X n_write_da_x;
	 WRITE_DA_X write_da_x;
	 N_READ_AD_X n_read_ad_x;
	 READ_AD_X read_ad_x;
	 N_READ_PIXEL_AD n_read_pixel_ad;
	 READ_PIXEL_AD read_pixel_ad;
	 N_GET_Z_DISTANCE n_get_z_distance;
	 GET_Z_DISTANCE get_z_distance;
	 N_GET_IO_STATUS n_get_io_status;
	 GET_IO_STATUS get_io_status;
	 N_GET_TIME n_get_time;
	 GET_TIME get_time;
	 N_SET_DEFOCUS n_set_defocus;
	 SET_DEFOCUS set_defocus;
	 N_SET_SOFTSTART_MODE n_set_softstart_mode;
	 SET_SOFTSTART_MODE set_softstart_mode;
	 N_SET_SOFTSTART_LEVEL n_set_softstart_level;
	 SET_SOFTSTART_LEVEL set_softstart_level;
	 N_CONTROL_COMMAND n_control_command;
	 CONTROL_COMMAND control_command;
	 LOAD_COR load_cor;
	 LOAD_PRO load_pro;
	 N_GET_SERIAL_NUMBER n_get_serial_number;
	 GET_SERIAL_NUMBER get_serial_number;
	 N_GET_RTC_VERSION n_get_rtc_version;
	 GET_RTC_VERSION get_rtc_version;
	 GET_HI_DATA get_hi_data;
	 N_AUTO_CAL n_auto_cal;
	 AUTO_CAL auto_cal;
	 N_GET_LIST_SPACE n_get_list_space;
	 GET_LIST_SPACE get_list_space;
	 TEACHIN teachin;
	 N_GET_VALUE n_get_value;
	 GET_VALUE get_value;
	 N_SET_IO_BIT n_set_io_bit;
	 SET_IO_BIT set_io_bit;
	 N_CLEAR_IO_BIT n_clear_io_bit;
	 CLEAR_IO_BIT clear_io_bit;
	 SET_DUTY_CYCLE_TABLE set_duty_cycle_table;
	 N_MOVE_TO n_move_to;
	 MOVE_TO move_to;
};

#endif // !defined(AFX_GALVOSETTINGS_H__5FD94C31_2552_414E_9C4C_E085E12470EC__INCLUDED_2)
