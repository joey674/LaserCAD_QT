
#if !defined(AFX_SCANNER_H__08060DB8_7C71_4634_AC7C_EBF518F0DE9D__INCLUDED_3)
#define AFX_SCANNER_H__08060DB8_7C71_4634_AC7C_EBF518F0DE9D__INCLUDED_3


#if defined(WIN32)
#define ULONG_PTR UINT
#else
#define ULONG_PTR UINT64
#endif // defined(WIN32)
//#include "Scanner.h"
#include "RTC5expl.h"



class AFX_EXT_CLASS RTC6 :public RTC5
{


private:
	enum E_PixelModes
	{
		STANDARD = 0, // like RTC5-Mode; up to 400 kHz; 1 pixel per set_pixel command; 2 values of 32 bit per pixel 
		ENHANCED = 16, // up to 800 kHz; 2 pixel per set_pixel command; 1 value of 32 bit per pixel
		FAST = 32, // up to 1.6 MHz; 4 pixel per set_pixel command; 1 value of 16 bit per pixel
		ULTRAFAST = 64, // up to 3.2 MHz; 8 pixel per set_pixel command; 1 value of 8 bit per pixel
		STANDARD_MOVE = 256 // like STANDARD, but with continuous scanner movement
	} Mode;

	enum E_PixelPorts
	{
		NO_OUT_PORT = 0,
		ANALOG_OUT1 = 1, // laser connector ANALOG OUT1
		ANALOG_OUT2 = 2, // laser connector ANALOG OUT2
		DIGITAL_8Bit = 3, // EXTENSION 2 socket connector (8-bit)
		DIGITAL_16Bit = 4, // EXTENSION 1 socket connector (16-bit)
		PULSE_LENGTH = 5 // not allowed for mode = 0 or mode = 256
	} Port;

public:
	//bool m_bTriggered;
	bool m_bAdvScanAheadDelay;
	double m_dCornerScale, m_dEndScale, m_dAccScale;
	double m_dAdvScanAheadLaserOn,  m_dAdvScanAheadLaserOff;		
	
	RTC6(CWnd* pOwner);//RTC6
	virtual ~RTC6();//RTC6
	
	//virtual void ExcuteGalvoPara(CLaserPara* pPara, bool bJudge = true, bool bSet = true);
	virtual	DriverCard GetCardType();//RTC6
	//virtual void EndOfList(bool bWait = false);
	virtual bool SetRTC();
	//virtual void StopExcute();
	virtual bool InitialRTC();//RTC6
	//virtual void WaitForStop();
	//	virtual void ExcuteCMDFunc(CString CMDline);																	//return excuting time
//	virtual void ExcuteCMDFunc(ScannerCMD CMDCode, double para1 = 0, double para2 = 0, double para3 = 0, double para4 = 0);	//RTC6

	virtual bool LoadFile(CString filepath);
	virtual long RTCOpen(HINSTANCE gLibRTC);//RTC6

	//virtual WORD GetHeadStatus();
	//virtual int GetSerielNr();
	//virtual	void StartList();
	//virtual double GetScanField();
	
	//virtual bool GetBusy();//RTC6
	//virtual UINT GetPosition();
	//virtual void GetCurPos();
	//virtual void SetAutoSpeedPosCtrl();
	
	//void StopAutoLaserControl();
	//??????

	virtual void SSetPixel(double dpulsewidth, double dvoltage, int npixel=1);

	//3D
	virtual void SPoint(double dx, double dy, double dz, double dtime);
	virtual void SMark3DTo(double dx, double dy, double dz);
	virtual void SJump3DTo(double dx, double dy, double dz);
	virtual void SArc3DTo(double dx, double dy, double dz, double dangle);
	virtual void SMark3DRelTo(double dx, double dy, double dz);
	virtual void SJump3DRelTo(double dx, double dy, double dz);
	virtual void SArc3DRelTo(double dx, double dy, double dz, double dangle);
	///	
	virtual void SParaMark3DTo(double dx, double dy, double dz, double dpara);
	virtual void SParaJump3DTo(double dx, double dy, double dz, double dpara);
	//microvector
	virtual void SMicroVector3D(double dx, double dy, double dz, double laseron, double laseroff);
	virtual void SMicroVectorRel3D(double dx, double dy, double dz, double laseron, double laseroff);
	//Bitmap
	virtual void SSetZPosition(double dz);
	virtual void SSetPixelLine(int ichanel, double dperiod, double dx, double dy, double dz=0);
	
	virtual void SetLaserDelays(double dlaserondelay, double dlaseroffdelay);		//laser on and off delays
	UINT SetAutoLaserControl(const UINT Ctrl, const UINT Value, const UINT Mode, const UINT MinValue, const UINT MaxValue);//RTC6	

protected:
// 	//New  INIT_RTC5_DLL , FREE_RTC5_DLL and RTC5_COUNT_CARDS were removed and are not supported by the RTC6

// 	
// 	typedef UINT (__stdcall *SET_SCANAHEAD_PARAMS_FP)(const UINT Mode, const UINT HeadNo, const UINT TableNo, const UINT PreViewTime, const UINT Vmax, const double Amax);
// 	
	bool SelectRTC6(int iDefault);//RTC6

	typedef UINT (__stdcall *INIT_RTC6_DLL_FP)(void);
	INIT_RTC6_DLL_FP init_rtc6_dll;
	typedef void (__stdcall *FREE_RTC6_DLL_FP)(void);
	FREE_RTC6_DLL_FP free_rtc6_dll;
	typedef void (__stdcall *SET_RTC4_MODE_FP)(void);
	SET_RTC4_MODE_FP set_rtc4_mode;
	typedef void (__stdcall *SET_RTC5_MODE_FP)(void);
	SET_RTC5_MODE_FP set_rtc5_mode;
	typedef void (__stdcall *SET_RTC6_MODE_FP)(void);
	SET_RTC6_MODE_FP set_rtc6_mode;

	typedef UINT (__stdcall *RTC6_COUNT_CARDS_FP)(void);
	RTC6_COUNT_CARDS_FP rtc6_count_cards;

	typedef UINT (__stdcall *N_GET_SCANAHEAD_PARAMS_FP)(const UINT CardNo, const UINT HeadNo, UINT* PreViewTime, UINT* Vmax, double* Amax);
	N_GET_SCANAHEAD_PARAMS_FP n_get_scanahead_params;
	typedef long (__stdcall *N_ACTIVATE_SCANAHEAD_AUTODELAYS_FP)(const UINT CardNo, const long Mode);
	N_ACTIVATE_SCANAHEAD_AUTODELAYS_FP n_activate_scanahead_autodelays;
	typedef void (__stdcall *N_SET_SCANAHEAD_LASER_SHIFTS_FP)(const UINT CardNo, const long LaserOnDelay, const long LaserOffDelay);
	N_SET_SCANAHEAD_LASER_SHIFTS_FP n_set_scanahead_laser_shifts;
	typedef void (__stdcall *N_SET_SCANAHEAD_LINE_PARAMS_FP)(const UINT CardNo, const UINT CornerScale, const UINT EndScale, const UINT AccScale);
	N_SET_SCANAHEAD_LINE_PARAMS_FP n_set_scanahead_line_params;
	typedef UINT (__stdcall *N_SET_SCANAHEAD_PARAMS_FP)(const UINT CardNo, const UINT Mode, const UINT HeadNo, const UINT TableNo, const UINT PreViewTime, const UINT Vmax, const double Amax);
	N_SET_SCANAHEAD_PARAMS_FP n_set_scanahead_params;
	typedef UINT (__stdcall *GET_SCANAHEAD_PARAMS_FP)(const UINT HeadNo, UINT* PreViewTime, UINT* Vmax, double* Amax);
	GET_SCANAHEAD_PARAMS_FP get_scanahead_params;
	typedef long (__stdcall *ACTIVATE_SCANAHEAD_AUTODELAYS_FP)(const long Mode);
	ACTIVATE_SCANAHEAD_AUTODELAYS_FP activate_scanahead_autodelays;
	typedef void (__stdcall *SET_SCANAHEAD_LASER_SHIFTS_FP)(const long LaserOnDelay, const long LaserOffDelay);
	SET_SCANAHEAD_LASER_SHIFTS_FP set_scanahead_laser_shifts;
	typedef void (__stdcall *SET_SCANAHEAD_LINE_PARAMS_FP)(const UINT CornerScale, const UINT EndScale, const UINT AccScale);
	SET_SCANAHEAD_LINE_PARAMS_FP set_scanahead_line_params;
	typedef UINT (__stdcall *SET_SCANAHEAD_PARAMS_FP)(const UINT Mode, const UINT HeadNo, const UINT TableNo, const UINT PreViewTime, const UINT Vmax, const double Amax);
	SET_SCANAHEAD_PARAMS_FP set_scanahead_params;

	typedef void (__stdcall *N_ACTIVATE_SCANAHEAD_AUTODELAYS_LIST_FP)(const UINT CardNo, const long Mode);
	N_ACTIVATE_SCANAHEAD_AUTODELAYS_LIST_FP n_activate_scanahead_autodelays_list;
	typedef void (__stdcall *N_SET_SCANAHEAD_LASER_SHIFTS_LIST_FP)(const UINT CardNo, const long LaserOnDelay, const long LaserOffDelay);
    N_SET_SCANAHEAD_LASER_SHIFTS_LIST_FP n_set_scanahead_laser_shifts_list;
	typedef void (__stdcall *N_SET_SCANAHEAD_LINE_PARAMS_LIST_FP)(const UINT CardNo, const UINT CornerScale, const UINT EndScale, const UINT AccScale);
	N_SET_SCANAHEAD_LINE_PARAMS_LIST_FP n_set_scanahead_line_params_list;
	typedef void (__stdcall *ACTIVATE_SCANAHEAD_AUTODELAYS_LIST_FP)(const long Mode);
	ACTIVATE_SCANAHEAD_AUTODELAYS_LIST_FP activate_scanahead_autodelays_list;
	typedef void (__stdcall *SET_SCANAHEAD_LASER_SHIFTS_LIST_FP)(const long LaserOnDelay, const long LaserOffDelay);
	SET_SCANAHEAD_LASER_SHIFTS_LIST_FP set_scanahead_laser_shifts_list;
	typedef void (__stdcall *SET_SCANAHEAD_LINE_PARAMS_LIST_FP)(const UINT CornerScale, const UINT EndScale, const UINT AccScale);
	SET_SCANAHEAD_LINE_PARAMS_LIST_FP set_scanahead_line_params_list;

	typedef UINT (__stdcall *ETH_COUNT_CARDS_FP)(void);
	ETH_COUNT_CARDS_FP eth_count_cards;
	typedef UINT (__stdcall *ETH_FOUND_CARDS_FP)(void);
	ETH_FOUND_CARDS_FP eth_found_cards;
	typedef UINT (__stdcall *ETH_MAX_CARD_FP)(void);
	ETH_MAX_CARD_FP eth_max_card;
	typedef long (__stdcall *ETH_REMOVE_CARD_FP)(const UINT CardNo);
	ETH_REMOVE_CARD_FP eth_remove_card;
	typedef void (__stdcall *ETH_GET_CARD_INFO_FP)(const UINT CardNo, const ULONG_PTR Ptr);
	ETH_GET_CARD_INFO_FP eth_get_card_info;
	typedef void (__stdcall *ETH_GET_CARD_INFO_SEARCH_FP)(const UINT SearchNo, const ULONG_PTR Ptr);
	ETH_GET_CARD_INFO_SEARCH_FP eth_get_card_info_search;
	typedef void (__stdcall *ETH_SET_SEARCH_CARDS_TIMEOUT_FP)(const UINT TimeOut);
	ETH_SET_SEARCH_CARDS_TIMEOUT_FP eth_set_search_cards_timeout;
	typedef UINT (__stdcall *ETH_SEARCH_CARDS_FP)(const UINT Ip, const UINT NetMask);
	ETH_SEARCH_CARDS_FP eth_search_cards;
	typedef UINT (__stdcall *ETH_SEARCH_CARDS_RANGE_FP)(const UINT StartIp, const UINT EndIp);
	ETH_SEARCH_CARDS_RANGE_FP eth_search_cards_range;
	typedef long (__stdcall *ETH_ASSIGN_CARD_IP_FP)(const UINT Ip, const UINT CardNo);
	ETH_ASSIGN_CARD_IP_FP eth_assign_card_ip;
	typedef long (__stdcall *ETH_ASSIGN_CARD_FP)(const UINT SearchNo, const UINT CardNo);
	ETH_ASSIGN_CARD_FP eth_assign_card;
	typedef UINT (__stdcall *ETH_CONVERT_STRING_TO_IP_FP)(const char* IpString);
	ETH_CONVERT_STRING_TO_IP_FP eth_convert_string_to_ip;
	typedef void (__stdcall *ETH_CONVERT_IP_TO_STRING_FP)(const UINT Ip, const ULONG_PTR IpString);
	ETH_CONVERT_IP_TO_STRING_FP eth_convert_ip_to_string;
	typedef UINT (__stdcall *ETH_GET_IP_FP)(const UINT CardNo);
	ETH_GET_IP_FP eth_get_ip;
	typedef UINT (__stdcall *ETH_GET_IP_SEARCH_FP)(const UINT SearchNo);
	ETH_GET_IP_SEARCH_FP eth_get_ip_search;
	typedef UINT (__stdcall *ETH_GET_SERIAL_SEARCH_FP)(const UINT SearchNo);
	ETH_GET_SERIAL_SEARCH_FP eth_get_serial_search;
	typedef UINT (__stdcall *N_ETH_GET_LAST_ERROR_FP)(const UINT CardNo);
	N_ETH_GET_LAST_ERROR_FP n_eth_get_last_error;
	typedef UINT (__stdcall *N_ETH_GET_ERROR_FP)(const UINT CardNo);
	N_ETH_GET_ERROR_FP n_eth_get_error;
	typedef UINT (__stdcall *N_ETH_ERROR_DUMP_FP)(const UINT CardNo, const ULONG_PTR Dump);
	N_ETH_ERROR_DUMP_FP n_eth_error_dump;
	typedef UINT (__stdcall *N_ETH_SET_STATIC_IP_FP)(const UINT CardNo, const UINT Ip, const UINT NetMask, const UINT Gateway);
	N_ETH_SET_STATIC_IP_FP n_eth_set_static_ip;
	typedef UINT (__stdcall *N_ETH_GET_STATIC_IP_FP)(const UINT CardNo, UINT* Ip, UINT* NetMask, UINT* Gateway);
	N_ETH_GET_STATIC_IP_FP n_eth_get_static_ip;
	typedef UINT (__stdcall *N_ETH_SET_PORT_NUMBERS_FP)(const UINT CardNo, const UINT UDPsearch, const UINT UDPexcl, const UINT TCP);
	N_ETH_SET_PORT_NUMBERS_FP n_eth_set_port_numbers;
	typedef UINT (__stdcall *N_ETH_GET_PORT_NUMBERS_FP)(const UINT CardNo, UINT* UDPsearch, UINT* UDPexcl, UINT* TCP);
	N_ETH_GET_PORT_NUMBERS_FP n_eth_get_port_numbers;
	typedef void (__stdcall *N_ETH_SET_COM_TIMEOUTS_FP)(const UINT CardNo, const UINT AcquireTimeout, const UINT AcquireMaxRetries, const UINT SendRecvTimeout, const UINT SendRecvMaxRetries, const UINT KeepAlive, const UINT KeepInterval);
	N_ETH_SET_COM_TIMEOUTS_FP n_eth_set_com_timeouts;
	typedef void (__stdcall *N_ETH_GET_COM_TIMEOUTS_FP)(const UINT CardNo, UINT* AcquireTimeout, UINT* AcquireMaxRetries, UINT* SendRecvTimeout, UINT* SendRecvMaxRetries, UINT* KeepAlive, UINT* KeepInterval);
	N_ETH_GET_COM_TIMEOUTS_FP n_eth_get_com_timeouts;
	typedef UINT (__stdcall *N_ETH_CHECK_CONNECTION_FP)(const UINT CardNo);
	N_ETH_CHECK_CONNECTION_FP n_eth_check_connection;
	typedef UINT (__stdcall *ETH_GET_LAST_ERROR_FP)(void);
	ETH_GET_LAST_ERROR_FP eth_get_last_error;
	typedef UINT (__stdcall *ETH_GET_ERROR_FP)(void);
	ETH_GET_ERROR_FP eth_get_error;
	typedef UINT (__stdcall *ETH_ERROR_DUMP_FP)(const ULONG_PTR Dump);
	ETH_ERROR_DUMP_FP eth_error_dump;
	typedef UINT (__stdcall *ETH_SET_STATIC_IP_FP)(const UINT Ip, const UINT NetMask, const UINT Gateway);
	ETH_SET_STATIC_IP_FP eth_set_static_ip;
	typedef UINT (__stdcall *ETH_GET_STATIC_IP_FP)(UINT* Ip, UINT* NetMask, UINT* Gateway);
	ETH_GET_STATIC_IP_FP eth_get_static_ip;
	typedef UINT (__stdcall *ETH_SET_PORT_NUMBERS_FP)(const UINT UDPsearch, const UINT UDPexcl, const UINT TCP);
	ETH_SET_PORT_NUMBERS_FP eth_set_port_numbers;
	typedef UINT (__stdcall *ETH_GET_PORT_NUMBERS_FP)(UINT* UDPsearch, UINT* UDPexcl, UINT* TCP);
	ETH_GET_PORT_NUMBERS_FP eth_get_port_numbers;
	typedef void (__stdcall *ETH_SET_COM_TIMEOUTS_FP)(const UINT AcquireTimeout, const UINT AcquireMaxRetries, const UINT SendRecvTimeout, const UINT SendRecvMaxRetries, const UINT KeepAlive, const UINT KeepInterval);
	ETH_SET_COM_TIMEOUTS_FP eth_set_com_timeouts;
	typedef void (__stdcall *ETH_GET_COM_TIMEOUTS_FP)(UINT* AcquireTimeout, UINT* AcquireMaxRetries, UINT* SendRecvTimeout, UINT* SendRecvMaxRetries, UINT* KeepAlive, UINT* KeepInterval);
	ETH_GET_COM_TIMEOUTS_FP eth_get_com_timeouts;
	typedef UINT (__stdcall *ETH_CHECK_CONNECTION_FP)(void);
	ETH_CHECK_CONNECTION_FP eth_check_connection;
	typedef UINT (__stdcall *N_GET_CARD_TYPE_FP)(const UINT CardNo);
	N_GET_CARD_TYPE_FP n_get_card_type;
	typedef UINT (__stdcall *N_GET_BIOS_VERSION_FP)(const UINT CardNo);
	N_GET_BIOS_VERSION_FP n_get_bios_version;

	typedef void (__stdcall *N_MULTI_AXIS_FLAGS_FP)(const UINT CardNo, const UINT Flags);
	N_MULTI_AXIS_FLAGS_FP n_multi_axis_flags;

	typedef UINT (__stdcall *GET_CARD_TYPE_FP)(void);
	GET_CARD_TYPE_FP get_card_type;


	typedef UINT (__stdcall *GET_BIOS_VERSION_FP)(void);
	GET_BIOS_VERSION_FP get_bios_version;
/*	
	typedef UINT (__stdcall *GET_RTC_MODE_FP)(void);
	GET_RTC_MODE_FP get_rtc_mode;
	typedef UINT (__stdcall *N_GET_ERROR_FP)(const UINT CardNo);
	N_GET_ERROR_FP n_get_error;
	typedef UINT (__stdcall *N_GET_LAST_ERROR_FP)(const UINT CardNo);
	N_GET_LAST_ERROR_FP n_get_last_error;
	typedef void (__stdcall *N_RESET_ERROR_FP)(const UINT CardNo, const UINT Code);
	N_RESET_ERROR_FP n_reset_error;
	typedef UINT (__stdcall *N_SET_VERIFY_FP)(const UINT CardNo, const UINT Verify);
	N_SET_VERIFY_FP n_set_verify;
	typedef UINT (__stdcall *GET_ERROR_FP)(void);
	GET_ERROR_FP get_error;
	typedef UINT (__stdcall *GET_LAST_ERROR_FP)(void);
	GET_LAST_ERROR_FP get_last_error;
	typedef void (__stdcall *RESET_ERROR_FP)(const UINT Code);
	RESET_ERROR_FP reset_error;
	typedef UINT (__stdcall *SET_VERIFY_FP)(const UINT Verify);
	SET_VERIFY_FP set_verify;
	typedef UINT (__stdcall *VERIFY_CHECKSUM_FP)(const char* Name);
	VERIFY_CHECKSUM_FP verify_checksum;

	typedef UINT (__stdcall *READ_ABC_FROM_FILE_FP)(const char* Name, double* A, double* B, double* C);
    READ_ABC_FROM_FILE_FP read_abc_from_file;
	typedef UINT (__stdcall *WRITE_ABC_TO_FILE_FP)(const char* Name, const double A, const double B, const double C);
	WRITE_ABC_TO_FILE_FP write_abc_to_file;


	typedef UINT (__stdcall *ACQUIRE_RTC_FP)(const UINT CardNo);
	ACQUIRE_RTC_FP acquire_rtc;
	typedef UINT (__stdcall *RELEASE_RTC_FP)(const UINT CardNo);
	RELEASE_RTC_FP release_rtc;
	typedef UINT (__stdcall *SELECT_RTC_FP)(const UINT CardNo);
	SELECT_RTC_FP select_rtc;
	typedef UINT (__stdcall *GET_DLL_VERSION_FP)(void);
	GET_DLL_VERSION_FP get_dll_version;

    
	typedef UINT (__stdcall *N_GET_SERIAL_NUMBER_FP)(const UINT CardNo);
	N_GET_SERIAL_NUMBER_FP n_get_serial_number;
	typedef UINT (__stdcall *N_GET_HEX_VERSION_FP)(const UINT CardNo);
	N_GET_HEX_VERSION_FP n_get_hex_version;
	typedef UINT (__stdcall *N_GET_RTC_VERSION_FP)(const UINT CardNo);
	N_GET_RTC_VERSION_FP n_get_rtc_version;


	typedef UINT (__stdcall *GET_SERIAL_NUMBER_FP)(void);
	GET_SERIAL_NUMBER_FP get_serial_number;
	typedef UINT (__stdcall *GET_HEX_VERSION_FP)(void);
	GET_HEX_VERSION_FP get_hex_version;
	typedef UINT (__stdcall *GET_RTC_VERSION_FP)(void);
	GET_RTC_VERSION_FP get_rtc_version;

	typedef UINT (__stdcall *N_LOAD_PROGRAM_FILE_FP)(const UINT CardNo, const char* Path);
	N_LOAD_PROGRAM_FILE_FP n_load_program_file;
	typedef UINT (__stdcall *N_STORE_PROGRAM_FP)(const UINT CardNo, const UINT Mode);
	N_STORE_PROGRAM_FP n_store_program;
	typedef UINT (__stdcall *N_GET_INIT_STATUS_FP)(const UINT CardNo);
	N_GET_INIT_STATUS_FP n_get_init_status;
	typedef void (__stdcall *N_SYNC_SLAVES_FP)(const UINT CardNo);
	N_SYNC_SLAVES_FP n_sync_slaves;
	typedef UINT (__stdcall *N_GET_SYNC_STATUS_FP)(const UINT CardNo);
	N_GET_SYNC_STATUS_FP n_get_sync_status;
	typedef UINT (__stdcall *N_LOAD_CORRECTION_FILE_FP)(const UINT CardNo, const char* Name, const UINT No, const UINT Dim);
	N_LOAD_CORRECTION_FILE_FP n_load_correction_file;
	typedef UINT (__stdcall *N_LOAD_ZOOM_CORRECTION_FILE_FP)(const UINT CardNo, const char* Name, const UINT No);
	N_LOAD_ZOOM_CORRECTION_FILE_FP n_load_zoom_correction_file;
	typedef UINT (__stdcall *N_LOAD_Z_TABLE_FP)(const UINT CardNo, const double A, const double B, const double C);
	N_LOAD_Z_TABLE_FP n_load_z_table;
	typedef void (__stdcall *N_SELECT_COR_TABLE_FP)(const UINT CardNo, const UINT HeadA, const UINT HeadB);
	N_SELECT_COR_TABLE_FP n_select_cor_table;
	typedef UINT (__stdcall *N_SET_DSP_MODE_FP)(const UINT CardNo, const UINT Mode);
	N_SET_DSP_MODE_FP n_set_dsp_mode;
	typedef long (__stdcall *N_LOAD_STRETCH_TABLE_FP)(const UINT CardNo, const char* Name, const long No, const UINT TableNo);
	N_LOAD_STRETCH_TABLE_FP n_load_stretch_table;
	typedef double (__stdcall *N_GET_HEAD_PARA_FP)(const UINT CardNo, const UINT HeadNo, const UINT ParaNo);
	N_GET_HEAD_PARA_FP n_get_head_para;
	typedef double (__stdcall *N_GET_TABLE_PARA_FP)(const UINT CardNo, const UINT TableNo, const UINT ParaNo);
	N_GET_TABLE_PARA_FP n_get_table_para;
	typedef UINT (__stdcall *LOAD_PROGRAM_FILE_FP)(const char* Path);
	LOAD_PROGRAM_FILE_FP load_program_file;
	typedef UINT (__stdcall *STORE_PROGRAM_FP)(const UINT Mode);
	STORE_PROGRAM_FP store_program;
	typedef UINT (__stdcall *GET_INIT_STATUS_FP)(void);
	GET_INIT_STATUS_FP get_init_status;
	typedef void (__stdcall *SYNC_SLAVES_FP)(void);
	SYNC_SLAVES_FP sync_slaves;
	typedef UINT (__stdcall *GET_SYNC_STATUS_FP)(void);
	GET_SYNC_STATUS_FP get_sync_status;
	typedef UINT (__stdcall *LOAD_CORRECTION_FILE_FP)(const char* Name, const UINT No, const UINT Dim);
	LOAD_CORRECTION_FILE_FP load_correction_file;
	typedef UINT (__stdcall *LOAD_ZOOM_CORRECTION_FILE_FP)(const char* Name, const UINT No);
	LOAD_ZOOM_CORRECTION_FILE_FP load_zoom_correction_file;
	typedef UINT (__stdcall *LOAD_Z_TABLE_FP)(const double A, const double B, const double C);
	LOAD_Z_TABLE_FP load_z_table;
	typedef void (__stdcall *SELECT_COR_TABLE_FP)(const UINT HeadA, const UINT HeadB);
	SELECT_COR_TABLE_FP select_cor_table;
	typedef UINT (__stdcall *SET_DSP_MODE_FP)(const UINT Mode);
	SET_DSP_MODE_FP set_dsp_mode;
	typedef long (__stdcall *LOAD_STRETCH_TABLE_FP)(const char* Name, const long No, const UINT TableNo);
	LOAD_STRETCH_TABLE_FP load_stretch_table;
	typedef double (__stdcall *GET_HEAD_PARA_FP)(const UINT HeadNo, const UINT ParaNo);
	GET_HEAD_PARA_FP get_head_para;
	typedef double (__stdcall *GET_TABLE_PARA_FP)(const UINT TableNo, const UINT ParaNo);
	GET_TABLE_PARA_FP get_table_para;
	typedef void (__stdcall *N_CONFIG_LIST_FP)(const UINT CardNo, const UINT Mem1, const UINT Mem2);
	N_CONFIG_LIST_FP n_config_list;
	typedef void (__stdcall *N_GET_CONFIG_LIST_FP)(const UINT CardNo);
	N_GET_CONFIG_LIST_FP n_get_config_list;
	typedef UINT (__stdcall *N_SAVE_DISK_FP)(const UINT CardNo, const char* Name, const UINT Mode);
	N_SAVE_DISK_FP n_save_disk;
	typedef UINT (__stdcall *N_LOAD_DISK_FP)(const UINT CardNo, const char* Name, const UINT Mode);
	N_LOAD_DISK_FP n_load_disk;
	typedef UINT (__stdcall *N_GET_LIST_SPACE_FP)(const UINT CardNo);
	N_GET_LIST_SPACE_FP n_get_list_space;
	typedef void (__stdcall *CONFIG_LIST_FP)(const UINT Mem1, const UINT Mem2);
	CONFIG_LIST_FP config_list;
	typedef void (__stdcall *GET_CONFIG_LIST_FP)(void);
	GET_CONFIG_LIST_FP get_config_list;
	typedef UINT (__stdcall *SAVE_DISK_FP)(const char* Name, const UINT Mode);
	SAVE_DISK_FP save_disk;
	typedef UINT (__stdcall *LOAD_DISK_FP)(const char* Name, const UINT Mode);
	LOAD_DISK_FP load_disk;
	typedef UINT (__stdcall *GET_LIST_SPACE_FP)(void);
	GET_LIST_SPACE_FP get_list_space;
	typedef void (__stdcall *N_SET_START_LIST_POS_FP)(const UINT CardNo, const UINT ListNo, const UINT Pos);
	N_SET_START_LIST_POS_FP n_set_start_list_pos;
	typedef void (__stdcall *N_SET_START_LIST_FP)(const UINT CardNo, const UINT ListNo);
	N_SET_START_LIST_FP n_set_start_list;
	typedef void (__stdcall *N_SET_START_LIST_1_FP)(const UINT CardNo);
	N_SET_START_LIST_1_FP n_set_start_list_1;
	typedef void (__stdcall *N_SET_START_LIST_2_FP)(const UINT CardNo);
	N_SET_START_LIST_2_FP n_set_start_list_2;
	typedef void (__stdcall *N_SET_INPUT_POINTER_FP)(const UINT CardNo, const UINT Pos);
	N_SET_INPUT_POINTER_FP n_set_input_pointer;
	typedef UINT (__stdcall *N_LOAD_LIST_FP)(const UINT CardNo, const UINT ListNo, const UINT Pos);
	N_LOAD_LIST_FP n_load_list;
	typedef void (__stdcall *N_LOAD_SUB_FP)(const UINT CardNo, const UINT Index);
	N_LOAD_SUB_FP n_load_sub;
	typedef void (__stdcall *N_LOAD_CHAR_FP)(const UINT CardNo, const UINT Char);
	N_LOAD_CHAR_FP n_load_char;
	typedef void (__stdcall *N_LOAD_TEXT_TABLE_FP)(const UINT CardNo, const UINT Index);
	N_LOAD_TEXT_TABLE_FP n_load_text_table;
	typedef void (__stdcall *N_GET_LIST_POINTER_FP)(const UINT CardNo, UINT* ListNo, UINT* Pos);
	N_GET_LIST_POINTER_FP n_get_list_pointer;
	typedef UINT (__stdcall *N_GET_INPUT_POINTER_FP)(const UINT CardNo);
	N_GET_INPUT_POINTER_FP n_get_input_pointer;
	typedef void (__stdcall *SET_START_LIST_POS_FP)(const UINT ListNo, const UINT Pos);
	SET_START_LIST_POS_FP set_start_list_pos;
	typedef void (__stdcall *SET_START_LIST_FP)(const UINT ListNo);
	SET_START_LIST_FP set_start_list;
	typedef void (__stdcall *SET_START_LIST_1_FP)(void);
	SET_START_LIST_1_FP set_start_list_1;
	typedef void (__stdcall *SET_START_LIST_2_FP)(void);
	SET_START_LIST_2_FP set_start_list_2;
	typedef void (__stdcall *SET_INPUT_POINTER_FP)(const UINT Pos);
	SET_INPUT_POINTER_FP set_input_pointer;
	typedef UINT (__stdcall *LOAD_LIST_FP)(const UINT ListNo, const UINT Pos);
	LOAD_LIST_FP load_list;
	typedef void (__stdcall *LOAD_SUB_FP)(const UINT Index);
	LOAD_SUB_FP load_sub;
	typedef void (__stdcall *LOAD_CHAR_FP)(const UINT Char);
	LOAD_CHAR_FP load_char;
	typedef void (__stdcall *LOAD_TEXT_TABLE_FP)(const UINT Index);
	LOAD_TEXT_TABLE_FP load_text_table;
	typedef void (__stdcall *GET_LIST_POINTER_FP)(UINT* ListNo, UINT* Pos);
	GET_LIST_POINTER_FP get_list_pointer;
	typedef UINT (__stdcall *GET_INPUT_POINTER_FP)(void);
	GET_INPUT_POINTER_FP get_input_pointer;
	typedef void (__stdcall *N_EXECUTE_LIST_POS_FP)(const UINT CardNo, const UINT ListNo, const UINT Pos);
	N_EXECUTE_LIST_POS_FP n_execute_list_pos;
	typedef void (__stdcall *N_EXECUTE_AT_POINTER_FP)(const UINT CardNo, const UINT Pos);
	N_EXECUTE_AT_POINTER_FP n_execute_at_pointer;
	typedef void (__stdcall *N_EXECUTE_LIST_FP)(const UINT CardNo, const UINT ListNo);
	N_EXECUTE_LIST_FP n_execute_list;
	typedef void (__stdcall *N_EXECUTE_LIST_1_FP)(const UINT CardNo);
	N_EXECUTE_LIST_1_FP n_execute_list_1;
	typedef void (__stdcall *N_EXECUTE_LIST_2_FP)(const UINT CardNo);
	N_EXECUTE_LIST_2_FP n_execute_list_2;
	typedef void (__stdcall *N_GET_OUT_POINTER_FP)(const UINT CardNo, UINT* ListNo, UINT* Pos);
	N_GET_OUT_POINTER_FP n_get_out_pointer;
	typedef void (__stdcall *EXECUTE_LIST_POS_FP)(const UINT ListNo, const UINT Pos);
	EXECUTE_LIST_POS_FP execute_list_pos;
	typedef void (__stdcall *EXECUTE_AT_POINTER_FP)(const UINT Pos);
	EXECUTE_AT_POINTER_FP execute_at_pointer;
	typedef void (__stdcall *EXECUTE_LIST_FP)(const UINT ListNo);
	EXECUTE_LIST_FP execute_list;
	typedef void (__stdcall *EXECUTE_LIST_1_FP)(void);
	EXECUTE_LIST_1_FP execute_list_1;
	typedef void (__stdcall *EXECUTE_LIST_2_FP)(void);
	EXECUTE_LIST_2_FP execute_list_2;
	typedef void (__stdcall *GET_OUT_POINTER_FP)(UINT* ListNo, UINT* Pos);
	GET_OUT_POINTER_FP get_out_pointer;
	typedef void (__stdcall *N_AUTO_CHANGE_POS_FP)(const UINT CardNo, const UINT Pos);
	N_AUTO_CHANGE_POS_FP n_auto_change_pos;
	typedef void (__stdcall *N_START_LOOP_FP)(const UINT CardNo);
	N_START_LOOP_FP n_start_loop;
	typedef void (__stdcall *N_QUIT_LOOP_FP)(const UINT CardNo);
	N_QUIT_LOOP_FP n_quit_loop;
	typedef void (__stdcall *N_PAUSE_LIST_FP)(const UINT CardNo);
	N_PAUSE_LIST_FP n_pause_list;
	typedef void (__stdcall *N_RESTART_LIST_FP)(const UINT CardNo);
	N_RESTART_LIST_FP n_restart_list;
	typedef void (__stdcall *N_RELEASE_WAIT_FP)(const UINT CardNo);
	N_RELEASE_WAIT_FP n_release_wait;
	typedef void (__stdcall *N_STOP_EXECUTION_FP)(const UINT CardNo);
	N_STOP_EXECUTION_FP n_stop_execution;
	typedef void (__stdcall *N_AUTO_CHANGE_FP)(const UINT CardNo);
	N_AUTO_CHANGE_FP n_auto_change;
	typedef void (__stdcall *N_STOP_LIST_FP)(const UINT CardNo);
	N_STOP_LIST_FP n_stop_list;
	typedef UINT (__stdcall *N_GET_WAIT_STATUS_FP)(const UINT CardNo);
	N_GET_WAIT_STATUS_FP n_get_wait_status;
	typedef UINT (__stdcall *N_READ_STATUS_FP)(const UINT CardNo);
	N_READ_STATUS_FP n_read_status;
	typedef void (__stdcall *N_GET_STATUS_FP)(const UINT CardNo, UINT* Status, UINT* Pos);
	N_GET_STATUS_FP n_get_status;
	typedef void (__stdcall *AUTO_CHANGE_POS_FP)(const UINT Pos);
	AUTO_CHANGE_POS_FP auto_change_pos;
	typedef void (__stdcall *START_LOOP_FP)(void);
	START_LOOP_FP start_loop;
	typedef void (__stdcall *QUIT_LOOP_FP)(void);
	QUIT_LOOP_FP quit_loop;
	typedef void (__stdcall *PAUSE_LIST_FP)(void);
	PAUSE_LIST_FP pause_list;
	typedef void (__stdcall *RESTART_LIST_FP)(void);
	RESTART_LIST_FP restart_list;
	typedef void (__stdcall *RELEASE_WAIT_FP)(void);
	RELEASE_WAIT_FP release_wait;
	typedef void (__stdcall *STOP_EXECUTION_FP)(void);
	STOP_EXECUTION_FP stop_execution;
	typedef void (__stdcall *AUTO_CHANGE_FP)(void);
	AUTO_CHANGE_FP auto_change;
	typedef void (__stdcall *STOP_LIST_FP)(void);
	STOP_LIST_FP stop_list;
	typedef UINT (__stdcall *GET_WAIT_STATUS_FP)(void);
	GET_WAIT_STATUS_FP get_wait_status;
	typedef UINT (__stdcall *READ_STATUS_FP)(void);
	READ_STATUS_FP read_status;
	typedef void (__stdcall *GET_STATUS_FP)(UINT* Status, UINT* Pos);
	GET_STATUS_FP get_status;
	typedef void (__stdcall *N_SET_EXTSTARTPOS_FP)(const UINT CardNo, const UINT Pos);
	N_SET_EXTSTARTPOS_FP n_set_extstartpos;
	typedef void (__stdcall *N_SET_MAX_COUNTS_FP)(const UINT CardNo, const UINT Counts);
	N_SET_MAX_COUNTS_FP n_set_max_counts;
	typedef void (__stdcall *N_SET_CONTROL_MODE_FP)(const UINT CardNo, const UINT Mode);
	N_SET_CONTROL_MODE_FP n_set_control_mode;
	typedef void (__stdcall *N_SIMULATE_EXT_STOP_FP)(const UINT CardNo);
	N_SIMULATE_EXT_STOP_FP n_simulate_ext_stop;
	typedef void (__stdcall *N_SIMULATE_EXT_START_CTRL_FP)(const UINT CardNo);
	N_SIMULATE_EXT_START_CTRL_FP n_simulate_ext_start_ctrl;
	typedef UINT (__stdcall *N_GET_COUNTS_FP)(const UINT CardNo);
	N_GET_COUNTS_FP n_get_counts;
	typedef UINT (__stdcall *N_GET_STARTSTOP_INFO_FP)(const UINT CardNo);
	N_GET_STARTSTOP_INFO_FP n_get_startstop_info;
	typedef void (__stdcall *SET_EXTSTARTPOS_FP)(const UINT Pos);
	SET_EXTSTARTPOS_FP set_extstartpos;
	typedef void (__stdcall *SET_MAX_COUNTS_FP)(const UINT Counts);
	SET_MAX_COUNTS_FP set_max_counts;
	typedef void (__stdcall *SET_CONTROL_MODE_FP)(const UINT Mode);
	SET_CONTROL_MODE_FP set_control_mode;
	typedef void (__stdcall *SIMULATE_EXT_STOP_FP)(void);
	SIMULATE_EXT_STOP_FP simulate_ext_stop;
	typedef void (__stdcall *SIMULATE_EXT_START_CTRL_FP)(void);
	SIMULATE_EXT_START_CTRL_FP simulate_ext_start_ctrl;
	typedef UINT (__stdcall *GET_COUNTS_FP)(void);
	GET_COUNTS_FP get_counts;
	typedef UINT (__stdcall *GET_STARTSTOP_INFO_FP)(void);
	GET_STARTSTOP_INFO_FP get_startstop_info;
	typedef void (__stdcall *N_COPY_DST_SRC_FP)(const UINT CardNo, const UINT Dst, const UINT Src, const UINT Mode);
	N_COPY_DST_SRC_FP n_copy_dst_src;
	typedef void (__stdcall *N_SET_CHAR_POINTER_FP)(const UINT CardNo, const UINT Char, const UINT Pos);
	N_SET_CHAR_POINTER_FP n_set_char_pointer;
	typedef void (__stdcall *N_SET_SUB_POINTER_FP)(const UINT CardNo, const UINT Index, const UINT Pos);
	N_SET_SUB_POINTER_FP n_set_sub_pointer;
	typedef void (__stdcall *N_SET_TEXT_TABLE_POINTER_FP)(const UINT CardNo, const UINT Index, const UINT Pos);
	N_SET_TEXT_TABLE_POINTER_FP n_set_text_table_pointer;
	typedef void (__stdcall *N_SET_CHAR_TABLE_FP)(const UINT CardNo, const UINT Index, const UINT Pos);
	N_SET_CHAR_TABLE_FP n_set_char_table;
	typedef UINT (__stdcall *N_GET_CHAR_POINTER_FP)(const UINT CardNo, const UINT Char);
	N_GET_CHAR_POINTER_FP n_get_char_pointer;
	typedef UINT (__stdcall *N_GET_SUB_POINTER_FP)(const UINT CardNo, const UINT Index);
	N_GET_SUB_POINTER_FP n_get_sub_pointer;
	typedef UINT (__stdcall *N_GET_TEXT_TABLE_POINTER_FP)(const UINT CardNo, const UINT Index);
	N_GET_TEXT_TABLE_POINTER_FP n_get_text_table_pointer;
	typedef void (__stdcall *COPY_DST_SRC_FP)(const UINT Dst, const UINT Src, const UINT Mode);
	COPY_DST_SRC_FP copy_dst_src;
	typedef void (__stdcall *SET_CHAR_POINTER_FP)(const UINT Char, const UINT Pos);
	SET_CHAR_POINTER_FP set_char_pointer;
	typedef void (__stdcall *SET_SUB_POINTER_FP)(const UINT Index, const UINT Pos);
	SET_SUB_POINTER_FP set_sub_pointer;
	typedef void (__stdcall *SET_TEXT_TABLE_POINTER_FP)(const UINT Index, const UINT Pos);
	SET_TEXT_TABLE_POINTER_FP set_text_table_pointer;
	typedef void (__stdcall *SET_CHAR_TABLE_FP)(const UINT Index, const UINT Pos);
	SET_CHAR_TABLE_FP set_char_table;
	typedef UINT (__stdcall *GET_CHAR_POINTER_FP)(const UINT Char);
	GET_CHAR_POINTER_FP get_char_pointer;
	typedef UINT (__stdcall *GET_SUB_POINTER_FP)(const UINT Index);
	GET_SUB_POINTER_FP get_sub_pointer;
	typedef UINT (__stdcall *GET_TEXT_TABLE_POINTER_FP)(const UINT Index);
	GET_TEXT_TABLE_POINTER_FP get_text_table_pointer;
	typedef void (__stdcall *N_TIME_UPDATE_FP)(const UINT CardNo);
	N_TIME_UPDATE_FP n_time_update;
	typedef void (__stdcall *N_SET_SERIAL_STEP_FP)(const UINT CardNo, const UINT No, const UINT Step);
	N_SET_SERIAL_STEP_FP n_set_serial_step;
	typedef void (__stdcall *N_SELECT_SERIAL_SET_FP)(const UINT CardNo, const UINT No);
	N_SELECT_SERIAL_SET_FP n_select_serial_set;
	typedef void (__stdcall *N_SET_SERIAL_FP)(const UINT CardNo, const UINT No);
	N_SET_SERIAL_FP n_set_serial;
	typedef double (__stdcall *N_GET_SERIAL_FP)(const UINT CardNo);
	N_GET_SERIAL_FP n_get_serial;
	typedef double (__stdcall *N_GET_LIST_SERIAL_FP)(const UINT CardNo, UINT* SetNo);
	N_GET_LIST_SERIAL_FP n_get_list_serial;
	typedef void (__stdcall *TIME_UPDATE_FP)(void);
	TIME_UPDATE_FP time_update;
	typedef void (__stdcall *SET_SERIAL_STEP_FP)(const UINT No, const UINT Step);
	SET_SERIAL_STEP_FP set_serial_step;
	typedef void (__stdcall *SELECT_SERIAL_SET_FP)(const UINT No);
	SELECT_SERIAL_SET_FP select_serial_set;
	typedef void (__stdcall *SET_SERIAL_FP)(const UINT No);
	SET_SERIAL_FP set_serial;
	typedef double (__stdcall *GET_SERIAL_FP)(void);
	GET_SERIAL_FP get_serial;
	typedef double (__stdcall *GET_LIST_SERIAL_FP)(UINT* SetNo);
	GET_LIST_SERIAL_FP get_list_serial;
	typedef void (__stdcall *N_WRITE_IO_PORT_MASK_FP)(const UINT CardNo, const UINT Value, const UINT Mask);
	N_WRITE_IO_PORT_MASK_FP n_write_io_port_mask;
	typedef void (__stdcall *N_WRITE_8BIT_PORT_FP)(const UINT CardNo, const UINT Value);
	N_WRITE_8BIT_PORT_FP n_write_8bit_port;
	typedef UINT (__stdcall *N_READ_IO_PORT_FP)(const UINT CardNo);
	N_READ_IO_PORT_FP n_read_io_port;
	typedef UINT (__stdcall *N_READ_IO_PORT_BUFFER_FP)(const UINT CardNo, const UINT Index, UINT* Value, long* XPos, long* YPos, UINT* Time);
	N_READ_IO_PORT_BUFFER_FP n_read_io_port_buffer;
	typedef UINT (__stdcall *N_GET_IO_STATUS_FP)(const UINT CardNo);
	N_GET_IO_STATUS_FP n_get_io_status;
	typedef UINT (__stdcall *N_READ_ANALOG_IN_FP)(const UINT CardNo);
	N_READ_ANALOG_IN_FP n_read_analog_in;
	typedef void (__stdcall *N_WRITE_DA_X_FP)(const UINT CardNo, const UINT x, const UINT Value);
	N_WRITE_DA_X_FP n_write_da_x;
	typedef void (__stdcall *N_SET_LASER_OFF_DEFAULT_FP)(const UINT CardNo, const UINT AnalogOut1, const UINT AnalogOut2, const UINT DigitalOut);
	N_SET_LASER_OFF_DEFAULT_FP n_set_laser_off_default;
	typedef void (__stdcall *N_SET_PORT_DEFAULT_FP)(const UINT CardNo, const UINT Port, const UINT Value);
	N_SET_PORT_DEFAULT_FP n_set_port_default;
	typedef void (__stdcall *N_WRITE_IO_PORT_FP)(const UINT CardNo, const UINT Value);
	N_WRITE_IO_PORT_FP n_write_io_port;
	typedef void (__stdcall *N_WRITE_DA_1_FP)(const UINT CardNo, const UINT Value);
	N_WRITE_DA_1_FP n_write_da_1;
	typedef void (__stdcall *N_WRITE_DA_2_FP)(const UINT CardNo, const UINT Value);
	N_WRITE_DA_2_FP n_write_da_2;
	typedef void (__stdcall *WRITE_IO_PORT_MASK_FP)(const UINT Value, const UINT Mask);
	WRITE_IO_PORT_MASK_FP write_io_port_mask;
	typedef void (__stdcall *WRITE_8BIT_PORT_FP)(const UINT Value);
	WRITE_8BIT_PORT_FP write_8bit_port;
	typedef UINT (__stdcall *READ_IO_PORT_FP)(void);
	READ_IO_PORT_FP read_io_port;
	typedef UINT (__stdcall *READ_IO_PORT_BUFFER_FP)(const UINT Index, UINT* Value, long* XPos, long* YPos, UINT* Time);
	READ_IO_PORT_BUFFER_FP read_io_port_buffer;
	typedef UINT (__stdcall *GET_IO_STATUS_FP)(void);
	GET_IO_STATUS_FP get_io_status;
	typedef UINT (__stdcall *READ_ANALOG_IN_FP)(void);
	READ_ANALOG_IN_FP read_analog_in;
	typedef void (__stdcall *WRITE_DA_X_FP)(const UINT x, const UINT Value);
	WRITE_DA_X_FP write_da_x;
	typedef void (__stdcall *SET_LASER_OFF_DEFAULT_FP)(const UINT AnalogOut1, const UINT AnalogOut2, const UINT DigitalOut);
	SET_LASER_OFF_DEFAULT_FP set_laser_off_default;
	typedef void (__stdcall *SET_PORT_DEFAULT_FP)(const UINT Port, const UINT Value);
	SET_PORT_DEFAULT_FP set_port_default;
	typedef void (__stdcall *WRITE_IO_PORT_FP)(const UINT Value);
	WRITE_IO_PORT_FP write_io_port;
	typedef void (__stdcall *WRITE_DA_1_FP)(const UINT Value);
	WRITE_DA_1_FP write_da_1;
	typedef void (__stdcall *WRITE_DA_2_FP)(const UINT Value);
	WRITE_DA_2_FP write_da_2;
	typedef void (__stdcall *N_DISABLE_LASER_FP)(const UINT CardNo);
	N_DISABLE_LASER_FP n_disable_laser;
	typedef void (__stdcall *N_ENABLE_LASER_FP)(const UINT CardNo);
	N_ENABLE_LASER_FP n_enable_laser;
	typedef void (__stdcall *N_LASER_SIGNAL_ON_FP)(const UINT CardNo);
	N_LASER_SIGNAL_ON_FP n_laser_signal_on;
	typedef void (__stdcall *N_LASER_SIGNAL_OFF_FP)(const UINT CardNo);
	N_LASER_SIGNAL_OFF_FP n_laser_signal_off;
	typedef void (__stdcall *N_SET_STANDBY_FP)(const UINT CardNo, const UINT HalfPeriod, const UINT PulseLength);
	N_SET_STANDBY_FP n_set_standby;
	typedef void (__stdcall *N_SET_LASER_PULSES_CTRL_FP)(const UINT CardNo, const UINT HalfPeriod, const UINT PulseLength);
	N_SET_LASER_PULSES_CTRL_FP n_set_laser_pulses_ctrl;
	typedef void (__stdcall *N_SET_FIRSTPULSE_KILLER_FP)(const UINT CardNo, const UINT Length);
	N_SET_FIRSTPULSE_KILLER_FP n_set_firstpulse_killer;
	typedef void (__stdcall *N_SET_QSWITCH_DELAY_FP)(const UINT CardNo, const UINT Delay);
	N_SET_QSWITCH_DELAY_FP n_set_qswitch_delay;
	typedef void (__stdcall *N_SET_LASER_MODE_FP)(const UINT CardNo, const UINT Mode);
	N_SET_LASER_MODE_FP n_set_laser_mode;
	typedef void (__stdcall *N_SET_LASER_CONTROL_FP)(const UINT CardNo, const UINT Ctrl);
	N_SET_LASER_CONTROL_FP n_set_laser_control;
	typedef void (__stdcall *N_SET_LASER_PIN_OUT_FP)(const UINT CardNo, const UINT Pins);
	N_SET_LASER_PIN_OUT_FP n_set_laser_pin_out;
	typedef UINT (__stdcall *N_GET_LASER_PIN_IN_FP)(const UINT CardNo);
	N_GET_LASER_PIN_IN_FP n_get_laser_pin_in;
	typedef void (__stdcall *N_SET_SOFTSTART_LEVEL_FP)(const UINT CardNo, const UINT Index, const UINT Level);
	N_SET_SOFTSTART_LEVEL_FP n_set_softstart_level;
	typedef void (__stdcall *N_SET_SOFTSTART_MODE_FP)(const UINT CardNo, const UINT Mode, const UINT Number, const UINT Delay);
	N_SET_SOFTSTART_MODE_FP n_set_softstart_mode;
	typedef UINT (__stdcall *N_SET_AUTO_LASER_CONTROL_FP)(const UINT CardNo, const UINT Ctrl, const UINT Value, const UINT Mode, const UINT MinValue, const UINT MaxValue);
	N_SET_AUTO_LASER_CONTROL_FP n_set_auto_laser_control;
	typedef UINT (__stdcall *N_SET_AUTO_LASER_PARAMS_FP)(const UINT CardNo, const UINT Ctrl, const UINT Value, const UINT MinValue, const UINT MaxValue);
	N_SET_AUTO_LASER_PARAMS_FP n_set_auto_laser_params;
	typedef long (__stdcall *N_LOAD_AUTO_LASER_CONTROL_FP)(const UINT CardNo, const char* Name, const UINT No);
	N_LOAD_AUTO_LASER_CONTROL_FP n_load_auto_laser_control;
	typedef long (__stdcall *N_LOAD_POSITION_CONTROL_FP)(const UINT CardNo, const char* Name, const UINT No);
	N_LOAD_POSITION_CONTROL_FP n_load_position_control;
	typedef void (__stdcall *N_SET_DEFAULT_PIXEL_FP)(const UINT CardNo, const UINT PulseLength);
	N_SET_DEFAULT_PIXEL_FP n_set_default_pixel;
	typedef void (__stdcall *N_GET_STANDBY_FP)(const UINT CardNo, UINT* HalfPeriod, UINT* PulseLength);
	N_GET_STANDBY_FP n_get_standby;
	typedef void (__stdcall *N_SET_PULSE_PICKING_FP)(const UINT CardNo, const UINT No);
	N_SET_PULSE_PICKING_FP n_set_pulse_picking;
	typedef void (__stdcall *N_SET_PULSE_PICKING_LENGTH_FP)(const UINT CardNo, const UINT Length);
	N_SET_PULSE_PICKING_LENGTH_FP n_set_pulse_picking_length;
	typedef void (__stdcall *N_CONFIG_LASER_SIGNALS_FP)(const UINT CardNo, const UINT Config);
	N_CONFIG_LASER_SIGNALS_FP n_config_laser_signals;
	typedef void (__stdcall *N_SET_LASER_POWER_FP)(const UINT CardNo, const UINT Port, const UINT Value);
	N_SET_LASER_POWER_FP n_set_laser_power;
	typedef void (__stdcall *DISABLE_LASER_FP)(void);
	DISABLE_LASER_FP disable_laser;
	typedef void (__stdcall *ENABLE_LASER_FP)(void);
	ENABLE_LASER_FP enable_laser;
	typedef void (__stdcall *LASER_SIGNAL_ON_FP)(void);
	LASER_SIGNAL_ON_FP laser_signal_on;
	typedef void (__stdcall *LASER_SIGNAL_OFF_FP)(void);
	LASER_SIGNAL_OFF_FP laser_signal_off;
	typedef void (__stdcall *SET_STANDBY_FP)(const UINT HalfPeriod, const UINT PulseLength);
	SET_STANDBY_FP set_standby;
	typedef void (__stdcall *SET_LASER_PULSES_CTRL_FP)(const UINT HalfPeriod, const UINT PulseLength);
	SET_LASER_PULSES_CTRL_FP set_laser_pulses_ctrl;
	typedef void (__stdcall *SET_FIRSTPULSE_KILLER_FP)(const UINT Length);
	SET_FIRSTPULSE_KILLER_FP set_firstpulse_killer;
	typedef void (__stdcall *SET_QSWITCH_DELAY_FP)(const UINT Delay);
	SET_QSWITCH_DELAY_FP set_qswitch_delay;
	typedef void (__stdcall *SET_LASER_MODE_FP)(const UINT Mode);
	SET_LASER_MODE_FP set_laser_mode;
	typedef void (__stdcall *SET_LASER_CONTROL_FP)(const UINT Ctrl);
	SET_LASER_CONTROL_FP set_laser_control;
	typedef void (__stdcall *SET_LASER_PIN_OUT_FP)(const UINT Pins);
	SET_LASER_PIN_OUT_FP set_laser_pin_out;
	typedef UINT (__stdcall *GET_LASER_PIN_IN_FP)(void);
	GET_LASER_PIN_IN_FP get_laser_pin_in;
	typedef void (__stdcall *SET_SOFTSTART_LEVEL_FP)(const UINT Index, const UINT Level);
	SET_SOFTSTART_LEVEL_FP set_softstart_level;
	typedef void (__stdcall *SET_SOFTSTART_MODE_FP)(const UINT Mode, const UINT Number, const UINT Delay);
	SET_SOFTSTART_MODE_FP set_softstart_mode;
	typedef UINT (__stdcall *SET_AUTO_LASER_CONTROL_FP)(const UINT Ctrl, const UINT Value, const UINT Mode, const UINT MinValue, const UINT MaxValue);
	SET_AUTO_LASER_CONTROL_FP set_auto_laser_control;
	typedef UINT (__stdcall *SET_AUTO_LASER_PARAMS_FP)(const UINT Ctrl, const UINT Value, const UINT MinValue, const UINT MaxValue);
	SET_AUTO_LASER_PARAMS_FP set_auto_laser_params;
	typedef long (__stdcall *LOAD_AUTO_LASER_CONTROL_FP)(const char* Name, const UINT No);
	LOAD_AUTO_LASER_CONTROL_FP load_auto_laser_control;
	typedef long (__stdcall *LOAD_POSITION_CONTROL_FP)(const char* Name, const UINT No);
	LOAD_POSITION_CONTROL_FP load_position_control;
	typedef void (__stdcall *SET_DEFAULT_PIXEL_FP)(const UINT PulseLength);
	SET_DEFAULT_PIXEL_FP set_default_pixel;
	typedef void (__stdcall *GET_STANDBY_FP)(UINT* HalfPeriod, UINT* PulseLength);
	GET_STANDBY_FP get_standby;
	typedef void (__stdcall *SET_PULSE_PICKING_FP)(const UINT No);
	SET_PULSE_PICKING_FP set_pulse_picking;
	typedef void (__stdcall *SET_PULSE_PICKING_LENGTH_FP)(const UINT Length);
	SET_PULSE_PICKING_LENGTH_FP set_pulse_picking_length;
	typedef void (__stdcall *CONFIG_LASER_SIGNALS_FP)(const UINT Config);
	CONFIG_LASER_SIGNALS_FP config_laser_signals;
	typedef void (__stdcall *SET_LASER_POWER_FP)(const UINT Port, const UINT Value);
	SET_LASER_POWER_FP set_laser_power;
	typedef void (__stdcall *N_SET_EXT_START_DELAY_FP)(const UINT CardNo, const long Delay, const UINT EncoderNo);
	N_SET_EXT_START_DELAY_FP n_set_ext_start_delay;
	typedef void (__stdcall *N_SET_ROT_CENTER_FP)(const UINT CardNo, const long X, const long Y);
	N_SET_ROT_CENTER_FP n_set_rot_center;
	typedef void (__stdcall *N_SIMULATE_ENCODER_FP)(const UINT CardNo, const UINT EncoderNo);
	N_SIMULATE_ENCODER_FP n_simulate_encoder;
	typedef UINT (__stdcall *N_GET_MARKING_INFO_FP)(const UINT CardNo);
	N_GET_MARKING_INFO_FP n_get_marking_info;
	typedef void (__stdcall *N_SET_ENCODER_SPEED_CTRL_FP)(const UINT CardNo, const UINT EncoderNo, const double Speed, const double Smooth);
	N_SET_ENCODER_SPEED_CTRL_FP n_set_encoder_speed_ctrl;
	typedef void (__stdcall *N_SET_MCBSP_X_FP)(const UINT CardNo, const double ScaleX);
	N_SET_MCBSP_X_FP n_set_mcbsp_x;
	typedef void (__stdcall *N_SET_MCBSP_Y_FP)(const UINT CardNo, const double ScaleY);
	N_SET_MCBSP_Y_FP n_set_mcbsp_y;
	typedef void (__stdcall *N_SET_MCBSP_ROT_FP)(const UINT CardNo, const double Resolution);
	N_SET_MCBSP_ROT_FP n_set_mcbsp_rot;
	typedef void (__stdcall *N_SET_MCBSP_MATRIX_FP)(const UINT CardNo);
	N_SET_MCBSP_MATRIX_FP n_set_mcbsp_matrix;
	typedef void (__stdcall *N_SET_MCBSP_IN_FP)(const UINT CardNo, const UINT Mode, const double Scale);
	N_SET_MCBSP_IN_FP n_set_mcbsp_in;
	typedef void (__stdcall *N_SET_MULTI_MCBSP_IN_FP)(const UINT CardNo, const UINT Ctrl, const UINT P, const UINT Mode);
	N_SET_MULTI_MCBSP_IN_FP n_set_multi_mcbsp_in;
	typedef void (__stdcall *N_SET_FLY_TRACKING_ERROR_FP)(const UINT CardNo, const UINT TrackingErrorX, const UINT TrackingErrorY);
	N_SET_FLY_TRACKING_ERROR_FP n_set_fly_tracking_error;
	typedef long (__stdcall *N_LOAD_FLY_2D_TABLE_FP)(const UINT CardNo, const char* Name, const UINT No);
	N_LOAD_FLY_2D_TABLE_FP n_load_fly_2d_table;
	typedef void (__stdcall *N_INIT_FLY_2D_FP)(const UINT CardNo, const long OffsetX, const long OffsetY);
	N_INIT_FLY_2D_FP n_init_fly_2d;
	typedef void (__stdcall *N_GET_FLY_2D_OFFSET_FP)(const UINT CardNo, long* OffsetX, long* OffsetY);
	N_GET_FLY_2D_OFFSET_FP n_get_fly_2d_offset;
	typedef void (__stdcall *N_GET_ENCODER_FP)(const UINT CardNo, long* Encoder0, long* Encoder1);
	N_GET_ENCODER_FP n_get_encoder;
	typedef void (__stdcall *N_READ_ENCODER_FP)(const UINT CardNo, long* Encoder0_1, long* Encoder1_1, long* Encoder0_2, long* Encoder1_2);
	N_READ_ENCODER_FP n_read_encoder;
	typedef long (__stdcall *N_GET_MCBSP_FP)(const UINT CardNo);
	N_GET_MCBSP_FP n_get_mcbsp;
	typedef long (__stdcall *N_READ_MCBSP_FP)(const UINT CardNo, const UINT No);
	N_READ_MCBSP_FP n_read_mcbsp;
	typedef long (__stdcall *N_READ_MULTI_MCBSP_FP)(const UINT CardNo, const UINT No);
	N_READ_MULTI_MCBSP_FP n_read_multi_mcbsp;
	typedef void (__stdcall *SET_EXT_START_DELAY_FP)(const long Delay, const UINT EncoderNo);
	SET_EXT_START_DELAY_FP set_ext_start_delay;
	typedef void (__stdcall *SET_ROT_CENTER_FP)(const long X, const long Y);
	SET_ROT_CENTER_FP set_rot_center;
	typedef void (__stdcall *SIMULATE_ENCODER_FP)(const UINT EncoderNo);
	SIMULATE_ENCODER_FP simulate_encoder;
	typedef UINT (__stdcall *GET_MARKING_INFO_FP)(void);
	GET_MARKING_INFO_FP get_marking_info;
	typedef void (__stdcall *SET_ENCODER_SPEED_CTRL_FP)(const UINT EncoderNo, const double Speed, const double Smooth);
	SET_ENCODER_SPEED_CTRL_FP set_encoder_speed_ctrl;
	typedef void (__stdcall *SET_MCBSP_X_FP)(const double ScaleX);
	SET_MCBSP_X_FP set_mcbsp_x;
	typedef void (__stdcall *SET_MCBSP_Y_FP)(const double ScaleY);
	SET_MCBSP_Y_FP set_mcbsp_y;
	typedef void (__stdcall *SET_MCBSP_ROT_FP)(const double Resolution);
	SET_MCBSP_ROT_FP set_mcbsp_rot;
	typedef void (__stdcall *SET_MCBSP_MATRIX_FP)(void);
	SET_MCBSP_MATRIX_FP set_mcbsp_matrix;
	typedef void (__stdcall *SET_MCBSP_IN_FP)(const UINT Mode, const double Scale);
	SET_MCBSP_IN_FP set_mcbsp_in;
	typedef void (__stdcall *SET_MULTI_MCBSP_IN_FP)(const UINT Ctrl, const UINT P, const UINT Mode);
	SET_MULTI_MCBSP_IN_FP set_multi_mcbsp_in;
	typedef void (__stdcall *SET_FLY_TRACKING_ERROR_FP)(const UINT TrackingErrorX, const UINT TrackingErrorY);
	SET_FLY_TRACKING_ERROR_FP set_fly_tracking_error;
	typedef long (__stdcall *LOAD_FLY_2D_TABLE_FP)(const char* Name, const UINT No);
	LOAD_FLY_2D_TABLE_FP load_fly_2d_table;
	typedef void (__stdcall *INIT_FLY_2D_FP)(const long OffsetX, const long OffsetY);
	INIT_FLY_2D_FP init_fly_2d;
	typedef void (__stdcall *GET_FLY_2D_OFFSET_FP)(long* OffsetX, long* OffsetY);
	GET_FLY_2D_OFFSET_FP get_fly_2d_offset;
	typedef void (__stdcall *GET_ENCODER_FP)(long* Encoder0, long* Encoder1);
	GET_ENCODER_FP get_encoder;
	typedef void (__stdcall *READ_ENCODER_FP)(long* Encoder0_1, long* Encoder1_1, long* Encoder0_2, long* Encoder1_2);
	READ_ENCODER_FP read_encoder;
	typedef long (__stdcall *GET_MCBSP_FP)(void);
	GET_MCBSP_FP get_mcbsp;
	typedef long (__stdcall *READ_MCBSP_FP)(const UINT No);
	READ_MCBSP_FP read_mcbsp;
	typedef long (__stdcall *READ_MULTI_MCBSP_FP)(const UINT No);
	READ_MULTI_MCBSP_FP read_multi_mcbsp;
	typedef double (__stdcall *N_GET_TIME_FP)(const UINT CardNo);
	N_GET_TIME_FP n_get_time;
	typedef double (__stdcall *N_GET_LAP_TIME_FP)(const UINT CardNo);
	N_GET_LAP_TIME_FP n_get_lap_time;
	typedef void (__stdcall *N_MEASUREMENT_STATUS_FP)(const UINT CardNo, UINT* Busy, UINT* Pos);
	N_MEASUREMENT_STATUS_FP n_measurement_status;
	typedef void (__stdcall *N_GET_WAVEFORM_FP)(const UINT CardNo, const UINT Channel, const UINT Number, const ULONG_PTR Ptr);
	N_GET_WAVEFORM_FP n_get_waveform;
	typedef void (__stdcall *N_BOUNCE_SUPP_FP)(const UINT CardNo, const UINT Length);
	N_BOUNCE_SUPP_FP n_bounce_supp;
	typedef void (__stdcall *N_HOME_POSITION_XYZ_FP)(const UINT CardNo, const long XHome, const long YHome, const long ZHome);
	N_HOME_POSITION_XYZ_FP n_home_position_xyz;
	typedef void (__stdcall *N_HOME_POSITION_FP)(const UINT CardNo, const long XHome, const long YHome);
	N_HOME_POSITION_FP n_home_position;
	typedef void (__stdcall *N_RS232_CONFIG_FP)(const UINT CardNo, const UINT BaudRate);
	N_RS232_CONFIG_FP n_rs232_config;
	typedef void (__stdcall *N_RS232_WRITE_DATA_FP)(const UINT CardNo, const UINT Data);
	N_RS232_WRITE_DATA_FP n_rs232_write_data;
	typedef void (__stdcall *N_RS232_WRITE_TEXT_FP)(const UINT CardNo, const char* pData);
	N_RS232_WRITE_TEXT_FP n_rs232_write_text;
	typedef UINT (__stdcall *N_RS232_READ_DATA_FP)(const UINT CardNo);
	N_RS232_READ_DATA_FP n_rs232_read_data;
	typedef UINT (__stdcall *N_SET_MCBSP_FREQ_FP)(const UINT CardNo, const UINT Freq);
	N_SET_MCBSP_FREQ_FP n_set_mcbsp_freq;
	typedef void (__stdcall *N_MCBSP_INIT_FP)(const UINT CardNo, const UINT XDelay, const UINT RDelay);
	N_MCBSP_INIT_FP n_mcbsp_init;
	typedef void (__stdcall *N_MCBSP_INIT_SPI_FP)(const UINT CardNo, const UINT ClockLevel, const UINT ClockDelay);
	N_MCBSP_INIT_SPI_FP n_mcbsp_init_spi;
	typedef UINT (__stdcall *N_GET_OVERRUN_FP)(const UINT CardNo);
	N_GET_OVERRUN_FP n_get_overrun;
	typedef UINT (__stdcall *N_GET_MASTER_SLAVE_FP)(const UINT CardNo);
	N_GET_MASTER_SLAVE_FP n_get_master_slave;
	typedef void (__stdcall *N_GET_TRANSFORM_FP)(const UINT CardNo, const UINT Number, const ULONG_PTR Ptr1, const ULONG_PTR Ptr2, const ULONG_PTR Ptr, const UINT Code);
	N_GET_TRANSFORM_FP n_get_transform;
	typedef void (__stdcall *N_STOP_TRIGGER_FP)(const UINT CardNo);
	N_STOP_TRIGGER_FP n_stop_trigger;
	typedef void (__stdcall *N_MOVE_TO_FP)(const UINT CardNo, const UINT Pos);
	N_MOVE_TO_FP n_move_to;
	typedef void (__stdcall *N_SET_ENDURING_WOBBEL_FP)(const UINT CardNo, const UINT CenterX, const UINT CenterY, const UINT CenterZ, const UINT LimitHi, const UINT LimitLo, const double ScaleX, const double ScaleY, const double ScaleZ);
	N_SET_ENDURING_WOBBEL_FP n_set_enduring_wobbel;
	typedef void (__stdcall *N_SET_FREE_VARIABLE_FP)(const UINT CardNo, const UINT VarNo, const UINT Value);
	N_SET_FREE_VARIABLE_FP n_set_free_variable;
	typedef UINT (__stdcall *N_GET_FREE_VARIABLE_FP)(const UINT CardNo, const UINT VarNo);
	N_GET_FREE_VARIABLE_FP n_get_free_variable;
	typedef void (__stdcall *N_SET_MCBSP_OUT_PTR_FP)(const UINT CardNo, const UINT Number, const ULONG_PTR SignalPtr);
	N_SET_MCBSP_OUT_PTR_FP n_set_mcbsp_out_ptr;
	typedef void (__stdcall *N_PERIODIC_TOGGLE_FP)(const UINT CardNo, const UINT Port, const UINT Mask, const UINT P1, const UINT P2, const UINT Count, const UINT Start);
	N_PERIODIC_TOGGLE_FP n_periodic_toggle;
	typedef void (__stdcall *N_MULTI_AXIS_CONFIG_FP)(const UINT CardNo, const UINT Cfg, const ULONG_PTR Ptr);
	N_MULTI_AXIS_CONFIG_FP n_multi_axis_config;
	typedef void (__stdcall *N_QUAD_AXIS_INIT_FP)(const UINT CardNo, const UINT Idle, const double X1, const double Y1);
	N_QUAD_AXIS_INIT_FP n_quad_axis_init;
	typedef UINT (__stdcall *N_QUAD_AXIS_GET_STATUS_FP)(const UINT CardNo);
	N_QUAD_AXIS_GET_STATUS_FP n_quad_axis_get_status;
	typedef void (__stdcall *N_QUAD_AXIS_GET_VALUES_FP)(const UINT CardNo, double* X1, double* Y1, UINT* Flags0, UINT* Flags1);
	N_QUAD_AXIS_GET_VALUES_FP n_quad_axis_get_values;
	typedef double (__stdcall *GET_TIME_FP)(void);
	GET_TIME_FP get_time;
	typedef double (__stdcall *GET_LAP_TIME_FP)(void);
	GET_LAP_TIME_FP get_lap_time;
	typedef void (__stdcall *MEASUREMENT_STATUS_FP)(UINT* Busy, UINT* Pos);
	MEASUREMENT_STATUS_FP measurement_status;
	typedef void (__stdcall *GET_WAVEFORM_FP)(const UINT Channel, const UINT Number, const ULONG_PTR Ptr);
	GET_WAVEFORM_FP get_waveform;
	typedef void (__stdcall *BOUNCE_SUPP_FP)(const UINT Length);
	BOUNCE_SUPP_FP bounce_supp;
	typedef void (__stdcall *HOME_POSITION_XYZ_FP)(const long XHome, const long YHome, const long ZHome);
	HOME_POSITION_XYZ_FP home_position_xyz;
	typedef void (__stdcall *HOME_POSITION_FP)(const long XHome, const long YHome);
	HOME_POSITION_FP home_position;
	typedef void (__stdcall *RS232_CONFIG_FP)(const UINT BaudRate);
	RS232_CONFIG_FP rs232_config;
	typedef void (__stdcall *RS232_WRITE_DATA_FP)(const UINT Data);
	RS232_WRITE_DATA_FP rs232_write_data;
	typedef void (__stdcall *RS232_WRITE_TEXT_FP)(const char* pData);
	RS232_WRITE_TEXT_FP rs232_write_text;
	typedef UINT (__stdcall *RS232_READ_DATA_FP)(void);
	RS232_READ_DATA_FP rs232_read_data;
	typedef UINT (__stdcall *SET_MCBSP_FREQ_FP)(const UINT Freq);
	SET_MCBSP_FREQ_FP set_mcbsp_freq;
	typedef void (__stdcall *MCBSP_INIT_FP)(const UINT XDelay, const UINT RDelay);
	MCBSP_INIT_FP mcbsp_init;
	typedef void (__stdcall *MCBSP_INIT_SPI_FP)(const UINT ClockLevel, const UINT ClockDelay);
	MCBSP_INIT_SPI_FP mcbsp_init_spi;
	typedef UINT (__stdcall *GET_OVERRUN_FP)(void);
	GET_OVERRUN_FP get_overrun;
	typedef UINT (__stdcall *GET_MASTER_SLAVE_FP)(void);
	GET_MASTER_SLAVE_FP get_master_slave;
	typedef void (__stdcall *GET_TRANSFORM_FP)(const UINT Number, const ULONG_PTR Ptr1, const ULONG_PTR Ptr2, const ULONG_PTR Ptr, const UINT Code);
	GET_TRANSFORM_FP get_transform;
	typedef void (__stdcall *STOP_TRIGGER_FP)(void);
	STOP_TRIGGER_FP stop_trigger;
	typedef void (__stdcall *MOVE_TO_FP)(const UINT Pos);
	MOVE_TO_FP move_to;
	typedef void (__stdcall *SET_ENDURING_WOBBEL_FP)(const UINT CenterX, const UINT CenterY, const UINT CenterZ, const UINT LimitHi, const UINT LimitLo, const double ScaleX, const double ScaleY, const double ScaleZ);
	SET_ENDURING_WOBBEL_FP set_enduring_wobbel;
	typedef void (__stdcall *SET_FREE_VARIABLE_FP)(const UINT VarNo, const UINT Value);
	SET_FREE_VARIABLE_FP set_free_variable;
	typedef UINT (__stdcall *GET_FREE_VARIABLE_FP)(const UINT VarNo);
	GET_FREE_VARIABLE_FP get_free_variable;
	typedef void (__stdcall *SET_MCBSP_OUT_PTR_FP)(const UINT Number, const ULONG_PTR SignalPtr);
	SET_MCBSP_OUT_PTR_FP set_mcbsp_out_ptr;
	typedef void (__stdcall *PERIODIC_TOGGLE_FP)(const UINT Port, const UINT Mask, const UINT P1, const UINT P2, const UINT Count, const UINT Start);
	PERIODIC_TOGGLE_FP periodic_toggle;
	typedef void (__stdcall *MULTI_AXIS_CONFIG_FP)(const UINT Cfg, const ULONG_PTR Ptr);
	MULTI_AXIS_CONFIG_FP multi_axis_config;
	typedef void (__stdcall *QUAD_AXIS_INIT_FP)(const UINT Idle, const double X1, const double Y1);
	QUAD_AXIS_INIT_FP quad_axis_init;
	typedef UINT (__stdcall *QUAD_AXIS_GET_STATUS_FP)(void);
	QUAD_AXIS_GET_STATUS_FP quad_axis_get_status;
	typedef void (__stdcall *QUAD_AXIS_GET_VALUES_FP)(double* X1, double* Y1, UINT* Flags0, UINT* Flags1);
	QUAD_AXIS_GET_VALUES_FP quad_axis_get_values;
	typedef void (__stdcall *N_SET_DEFOCUS_FP)(const UINT CardNo, const long Shift);
	N_SET_DEFOCUS_FP n_set_defocus;
	typedef void (__stdcall *N_GOTO_XYZ_FP)(const UINT CardNo, const long X, const long Y, const long Z);
	N_GOTO_XYZ_FP n_goto_xyz;
	typedef void (__stdcall *N_SET_ZOOM_FP)(const UINT CardNo, const UINT Zoom);
	N_SET_ZOOM_FP n_set_zoom;
	typedef void (__stdcall *N_GOTO_XY_FP)(const UINT CardNo, const long X, const long Y);
	N_GOTO_XY_FP n_goto_xy;
	typedef long (__stdcall *N_GET_Z_DISTANCE_FP)(const UINT CardNo, const long X, const long Y, const long Z);
	N_GET_Z_DISTANCE_FP n_get_z_distance;
	typedef void (__stdcall *SET_DEFOCUS_FP)(const long Shift);
	SET_DEFOCUS_FP set_defocus;
	typedef void (__stdcall *GOTO_XYZ_FP)(const long X, const long Y, const long Z);
	GOTO_XYZ_FP goto_xyz;
	typedef void (__stdcall *GOTO_XY_FP)(const long X, const long Y);
	GOTO_XY_FP goto_xy;
	typedef void (__stdcall *SET_ZOOM_FP)(const UINT Zoom);
	SET_ZOOM_FP set_zoom;
	typedef long (__stdcall *GET_Z_DISTANCE_FP)(const long X, const long Y, const long Z);
	GET_Z_DISTANCE_FP get_z_distance;
	typedef void (__stdcall *N_SET_OFFSET_XYZ_FP)(const UINT CardNo, const UINT HeadNo, const long XOffset, const long YOffset, const long ZOffset, const UINT at_once);
	N_SET_OFFSET_XYZ_FP n_set_offset_xyz;
	typedef void (__stdcall *N_SET_OFFSET_FP)(const UINT CardNo, const UINT HeadNo, const long XOffset, const long YOffset, const UINT at_once);
	N_SET_OFFSET_FP n_set_offset;
	typedef void (__stdcall *N_SET_MATRIX_FP)(const UINT CardNo, const UINT HeadNo, const double M11, const double M12, const double M21, const double M22, const UINT at_once);
	N_SET_MATRIX_FP n_set_matrix;
	typedef void (__stdcall *N_SET_ANGLE_FP)(const UINT CardNo, const UINT HeadNo, const double Angle, const UINT at_once);
	N_SET_ANGLE_FP n_set_angle;
	typedef void (__stdcall *N_SET_SCALE_FP)(const UINT CardNo, const UINT HeadNo, const double Scale, const UINT at_once);
	N_SET_SCALE_FP n_set_scale;
	typedef void (__stdcall *N_APPLY_MCBSP_FP)(const UINT CardNo, const UINT HeadNo, const UINT at_once);
	N_APPLY_MCBSP_FP n_apply_mcbsp;
	typedef UINT (__stdcall *N_UPLOAD_TRANSFORM_FP)(const UINT CardNo, const UINT HeadNo, const ULONG_PTR Ptr);
	N_UPLOAD_TRANSFORM_FP n_upload_transform;
	typedef void (__stdcall *SET_OFFSET_XYZ_FP)(const UINT HeadNo, const long XOffset, const long YOffset, const long ZOffset, const UINT at_once);
	SET_OFFSET_XYZ_FP set_offset_xyz;
	typedef void (__stdcall *SET_OFFSET_FP)(const UINT HeadNo, const long XOffset, const long YOffset, const UINT at_once);
	SET_OFFSET_FP set_offset;
	typedef void (__stdcall *SET_MATRIX_FP)(const UINT HeadNo, const double M11, const double M12, const double M21, const double M22, const UINT at_once);
	SET_MATRIX_FP set_matrix;
	typedef void (__stdcall *SET_ANGLE_FP)(const UINT HeadNo, const double Angle, const UINT at_once);
	SET_ANGLE_FP set_angle;
	typedef void (__stdcall *SET_SCALE_FP)(const UINT HeadNo, const double Scale, const UINT at_once);
	SET_SCALE_FP set_scale;
	typedef void (__stdcall *APPLY_MCBSP_FP)(const UINT HeadNo, const UINT at_once);
	APPLY_MCBSP_FP apply_mcbsp;
	typedef UINT (__stdcall *UPLOAD_TRANSFORM_FP)(const UINT HeadNo, const ULONG_PTR Ptr);
	UPLOAD_TRANSFORM_FP upload_transform;
	typedef UINT (__stdcall *TRANSFORM_FP)(long* Sig1, long* Sig2, const ULONG_PTR Ptr, const UINT Code);
	TRANSFORM_FP transform;
	typedef void (__stdcall *N_SET_DELAY_MODE_FP)(const UINT CardNo, const UINT VarPoly, const UINT DirectMove3D, const UINT EdgeLevel, const UINT MinJumpDelay, const UINT JumpLengthLimit);
	N_SET_DELAY_MODE_FP n_set_delay_mode;
	typedef void (__stdcall *N_SET_JUMP_SPEED_CTRL_FP)(const UINT CardNo, const double Speed);
	N_SET_JUMP_SPEED_CTRL_FP n_set_jump_speed_ctrl;
	typedef void (__stdcall *N_SET_MARK_SPEED_CTRL_FP)(const UINT CardNo, const double Speed);
	N_SET_MARK_SPEED_CTRL_FP n_set_mark_speed_ctrl;
	typedef void (__stdcall *N_SET_SKY_WRITING_PARA_FP)(const UINT CardNo, const double Timelag, const long LaserOnShift, const UINT Nprev, const UINT Npost);
	N_SET_SKY_WRITING_PARA_FP n_set_sky_writing_para;
	typedef void (__stdcall *N_SET_SKY_WRITING_LIMIT_FP)(const UINT CardNo, const double CosAngle);
	N_SET_SKY_WRITING_LIMIT_FP n_set_sky_writing_limit;
	typedef void (__stdcall *N_SET_SKY_WRITING_MODE_FP)(const UINT CardNo, const UINT Mode);
	N_SET_SKY_WRITING_MODE_FP n_set_sky_writing_mode;
	typedef long (__stdcall *N_LOAD_VARPOLYDELAY_FP)(const UINT CardNo, const char* Name, const UINT No);
	N_LOAD_VARPOLYDELAY_FP n_load_varpolydelay;
	typedef void (__stdcall *N_SET_HI_FP)(const UINT CardNo, const UINT HeadNo, const double GalvoGainX, const double GalvoGainY, const long GalvoOffsetX, const long GalvoOffsetY);
	N_SET_HI_FP n_set_hi;
	typedef void (__stdcall *N_GET_HI_POS_FP)(const UINT CardNo, const UINT HeadNo, long* X1, long* X2, long* Y1, long* Y2);
	N_GET_HI_POS_FP n_get_hi_pos;
	typedef UINT (__stdcall *N_AUTO_CAL_FP)(const UINT CardNo, const UINT HeadNo, const UINT Command);
	N_AUTO_CAL_FP n_auto_cal;
	typedef UINT (__stdcall *N_GET_AUTO_CAL_FP)(const UINT CardNo, const UINT HeadNo);
	N_GET_AUTO_CAL_FP n_get_auto_cal;
	typedef UINT (__stdcall *N_WRITE_HI_POS_FP)(const UINT CardNo, const UINT HeadNo, const long X1, const long X2, const long Y1, const long Y2);
	N_WRITE_HI_POS_FP n_write_hi_pos;
	typedef void (__stdcall *N_SET_TIMELAG_COMPENSATION_FP)(const UINT CardNo, const UINT HeadNo, const UINT TimeLagXY, const UINT TimeLagZ);
	N_SET_TIMELAG_COMPENSATION_FP n_set_timelag_compensation;
	typedef void (__stdcall *N_SET_SKY_WRITING_FP)(const UINT CardNo, const double Timelag, const long LaserOnShift);
	N_SET_SKY_WRITING_FP n_set_sky_writing;
	typedef void (__stdcall *N_GET_HI_DATA_FP)(const UINT CardNo, long* X1, long* X2, long* Y1, long* Y2);
	N_GET_HI_DATA_FP n_get_hi_data;
	typedef void (__stdcall *SET_DELAY_MODE_FP)(const UINT VarPoly, const UINT DirectMove3D, const UINT EdgeLevel, const UINT MinJumpDelay, const UINT JumpLengthLimit);
	SET_DELAY_MODE_FP set_delay_mode;
	typedef void (__stdcall *SET_JUMP_SPEED_CTRL_FP)(const double Speed);
	SET_JUMP_SPEED_CTRL_FP set_jump_speed_ctrl;
	typedef void (__stdcall *SET_MARK_SPEED_CTRL_FP)(const double Speed);
	SET_MARK_SPEED_CTRL_FP set_mark_speed_ctrl;
	typedef void (__stdcall *SET_SKY_WRITING_PARA_FP)(const double Timelag, const long LaserOnShift, const UINT Nprev, const UINT Npost);
	SET_SKY_WRITING_PARA_FP set_sky_writing_para;
	typedef void (__stdcall *SET_SKY_WRITING_LIMIT_FP)(const double CosAngle);
	SET_SKY_WRITING_LIMIT_FP set_sky_writing_limit;
	typedef void (__stdcall *SET_SKY_WRITING_MODE_FP)(const UINT Mode);
	SET_SKY_WRITING_MODE_FP set_sky_writing_mode;
	typedef long (__stdcall *LOAD_VARPOLYDELAY_FP)(const char* Name, const UINT No);
	LOAD_VARPOLYDELAY_FP load_varpolydelay;
	typedef void (__stdcall *SET_HI_FP)(const UINT HeadNo, const double GalvoGainX, const double GalvoGainY, const long GalvoOffsetX, const long GalvoOffsetY);
	SET_HI_FP set_hi;
	typedef void (__stdcall *GET_HI_POS_FP)(const UINT HeadNo, long* X1, long* X2, long* Y1, long* Y2);
	GET_HI_POS_FP get_hi_pos;
	typedef UINT (__stdcall *AUTO_CAL_FP)(const UINT HeadNo, const UINT Command);
	AUTO_CAL_FP auto_cal;
	typedef UINT (__stdcall *GET_AUTO_CAL_FP)(const UINT HeadNo);
	GET_AUTO_CAL_FP get_auto_cal;
	typedef UINT (__stdcall *WRITE_HI_POS_FP)(const UINT HeadNo, const long X1, const long X2, const long Y1, const long Y2);
	WRITE_HI_POS_FP write_hi_pos;
	typedef void (__stdcall *SET_TIMELAG_COMPENSATION_FP)(const UINT HeadNo, const UINT TimeLagXY, const UINT TimeLagZ);
	SET_TIMELAG_COMPENSATION_FP set_timelag_compensation;
	typedef void (__stdcall *SET_SKY_WRITING_FP)(const double Timelag, const long LaserOnShift);
	SET_SKY_WRITING_FP set_sky_writing;
	typedef void (__stdcall *GET_HI_DATA_FP)(long* X1, long* X2, long* Y1, long* Y2);
	GET_HI_DATA_FP get_hi_data;
	typedef void (__stdcall *N_SEND_USER_DATA_FP)(const UINT CardNo, const UINT Head, const UINT Axis, const long Data0, const long Data1, const long Data2, const long Data3, const long Data4);
	N_SEND_USER_DATA_FP n_send_user_data;
	typedef long (__stdcall *N_READ_USER_DATA_FP)(const UINT CardNo, const UINT Head, const UINT Axis, long* Data0, long* Data1, long* Data2, long* Data3, long* Data4);
	N_READ_USER_DATA_FP n_read_user_data;
	typedef void (__stdcall *N_CONTROL_COMMAND_FP)(const UINT CardNo, const UINT Head, const UINT Axis, const UINT Data);
	N_CONTROL_COMMAND_FP n_control_command;
	typedef long (__stdcall *N_GET_VALUE_FP)(const UINT CardNo, const UINT Signal);
	N_GET_VALUE_FP n_get_value;
	typedef void (__stdcall *N_GET_VALUES_FP)(const UINT CardNo, const ULONG_PTR SignalPtr, const ULONG_PTR ResultPtr);
	N_GET_VALUES_FP n_get_values;
	typedef void (__stdcall *N_GET_GALVO_CONTROLS_FP)(const UINT CardNo, const ULONG_PTR SignalPtr, const ULONG_PTR ResultPtr);
	N_GET_GALVO_CONTROLS_FP n_get_galvo_controls;
	typedef UINT (__stdcall *N_GET_HEAD_STATUS_FP)(const UINT CardNo, const UINT Head);
	N_GET_HEAD_STATUS_FP n_get_head_status;
	typedef long (__stdcall *N_SET_JUMP_MODE_FP)(const UINT CardNo, const long Flag, const UINT Length, const long VA1, const long VA2, const long VB1, const long VB2, const long JA1, const long JA2, const long JB1, const long JB2);
	N_SET_JUMP_MODE_FP n_set_jump_mode;
	typedef long (__stdcall *N_LOAD_JUMP_TABLE_OFFSET_FP)(const UINT CardNo, const char* Name, const UINT No, const UINT PosAck, const long Offset, const UINT MinDelay, const UINT MaxDelay, const UINT ListPos);
	N_LOAD_JUMP_TABLE_OFFSET_FP n_load_jump_table_offset;
	typedef UINT (__stdcall *N_GET_JUMP_TABLE_FP)(const UINT CardNo, const ULONG_PTR Ptr);
	N_GET_JUMP_TABLE_FP n_get_jump_table;
	typedef UINT (__stdcall *N_SET_JUMP_TABLE_FP)(const UINT CardNo, const ULONG_PTR Ptr);
	N_SET_JUMP_TABLE_FP n_set_jump_table;
	typedef long (__stdcall *N_LOAD_JUMP_TABLE_FP)(const UINT CardNo, const char* Name, const UINT No, const UINT PosAck, const UINT MinDelay, const UINT MaxDelay, const UINT ListPos);
	N_LOAD_JUMP_TABLE_FP n_load_jump_table;
	typedef void (__stdcall *SEND_USER_DATA_FP)(const UINT Head, const UINT Axis, const long Data0, const long Data1, const long Data2, const long Data3, const long Data4);
	SEND_USER_DATA_FP send_user_data;
	typedef long (__stdcall *READ_USER_DATA_FP)(const UINT Head, const UINT Axis, long* Data0, long* Data1, long* Data2, long* Data3, long* Data4);
	READ_USER_DATA_FP read_user_data;
	typedef void (__stdcall *CONTROL_COMMAND_FP)(const UINT Head, const UINT Axis, const UINT Data);
	CONTROL_COMMAND_FP control_command;
	typedef long (__stdcall *GET_VALUE_FP)(const UINT Signal);
	GET_VALUE_FP get_value;
	typedef void (__stdcall *GET_VALUES_FP)(const ULONG_PTR SignalPtr, const ULONG_PTR ResultPtr);
	GET_VALUES_FP get_values;
	typedef void (__stdcall *GET_GALVO_CONTROLS_FP)(const ULONG_PTR SignalPtr, const ULONG_PTR ResultPtr);
	GET_GALVO_CONTROLS_FP get_galvo_controls;
	typedef UINT (__stdcall *GET_HEAD_STATUS_FP)(const UINT Head);
	GET_HEAD_STATUS_FP get_head_status;
	typedef long (__stdcall *SET_JUMP_MODE_FP)(const long Flag, const UINT Length, const long VA1, const long VA2, const long VB1, const long VB2, const long JA1, const long JA2, const long JB1, const long JB2);
	SET_JUMP_MODE_FP set_jump_mode;
	typedef long (__stdcall *LOAD_JUMP_TABLE_OFFSET_FP)(const char* Name, const UINT No, const UINT PosAck, const long Offset, const UINT MinDelay, const UINT MaxDelay, const UINT ListPos);
	LOAD_JUMP_TABLE_OFFSET_FP load_jump_table_offset;
	typedef UINT (__stdcall *GET_JUMP_TABLE_FP)(const ULONG_PTR Ptr);
	GET_JUMP_TABLE_FP get_jump_table;
	typedef UINT (__stdcall *SET_JUMP_TABLE_FP)(const ULONG_PTR Ptr);
	SET_JUMP_TABLE_FP set_jump_table;
	typedef long (__stdcall *LOAD_JUMP_TABLE_FP)(const char* Name, const UINT No, const UINT PosAck, const UINT MinDelay, const UINT MaxDelay, const UINT ListPos);
	LOAD_JUMP_TABLE_FP load_jump_table;




  
	typedef void (__stdcall *N_STEPPER_INIT_FP)(const UINT CardNo, const UINT No, const UINT Period, const long Dir, const long Pos, const UINT Tol, const UINT Enable, const UINT WaitTime);
	N_STEPPER_INIT_FP n_stepper_init;
	typedef void (__stdcall *N_STEPPER_ENABLE_FP)(const UINT CardNo, const long Enable1, const long Enable2);
	N_STEPPER_ENABLE_FP n_stepper_enable;
	typedef void (__stdcall *N_STEPPER_DISABLE_SWITCH_FP)(const UINT CardNo, const long Disable1, const long Disable2);
	N_STEPPER_DISABLE_SWITCH_FP n_stepper_disable_switch;
	typedef void (__stdcall *N_STEPPER_CONTROL_FP)(const UINT CardNo, const long Period1, const long Period2);
	N_STEPPER_CONTROL_FP n_stepper_control;
	typedef void (__stdcall *N_STEPPER_ABS_NO_FP)(const UINT CardNo, const UINT No, const long Pos, const UINT WaitTime);
	N_STEPPER_ABS_NO_FP n_stepper_abs_no;
	typedef void (__stdcall *N_STEPPER_REL_NO_FP)(const UINT CardNo, const UINT No, const long dPos, const UINT WaitTime);
	N_STEPPER_REL_NO_FP n_stepper_rel_no;
	typedef void (__stdcall *N_STEPPER_ABS_FP)(const UINT CardNo, const long Pos1, const long Pos2, const UINT WaitTime);
	N_STEPPER_ABS_FP n_stepper_abs;
	typedef void (__stdcall *N_STEPPER_REL_FP)(const UINT CardNo, const long dPos1, const long dPos2, const UINT WaitTime);
	N_STEPPER_REL_FP n_stepper_rel;
	typedef void (__stdcall *N_GET_STEPPER_STATUS_FP)(const UINT CardNo, UINT* Status1, long* Pos1, UINT* Status2, long* Pos2);
	N_GET_STEPPER_STATUS_FP n_get_stepper_status;
	typedef void (__stdcall *STEPPER_INIT_FP)(const UINT No, const UINT Period, const long Dir, const long Pos, const UINT Tol, const UINT Enable, const UINT WaitTime);
	STEPPER_INIT_FP stepper_init;
	typedef void (__stdcall *STEPPER_ENABLE_FP)(const long Enable1, const long Enable2);
	STEPPER_ENABLE_FP stepper_enable;
	typedef void (__stdcall *STEPPER_DISABLE_SWITCH_FP)(const long Disable1, const long Disable2);
	STEPPER_DISABLE_SWITCH_FP stepper_disable_switch;
	typedef void (__stdcall *STEPPER_CONTROL_FP)(const long Period1, const long Period2);
	STEPPER_CONTROL_FP stepper_control;
	typedef void (__stdcall *STEPPER_ABS_NO_FP)(const UINT No, const long Pos, const UINT WaitTime);
	STEPPER_ABS_NO_FP stepper_abs_no;
	typedef void (__stdcall *STEPPER_REL_NO_FP)(const UINT No, const long dPos, const UINT WaitTime);
	STEPPER_REL_NO_FP stepper_rel_no;
	typedef void (__stdcall *STEPPER_ABS_FP)(const long Pos1, const long Pos2, const UINT WaitTime);
	STEPPER_ABS_FP stepper_abs;
	typedef void (__stdcall *STEPPER_REL_FP)(const long dPos1, const long dPos2, const UINT WaitTime);
	STEPPER_REL_FP stepper_rel;
	typedef void (__stdcall *GET_STEPPER_STATUS_FP)(UINT* Status1, long* Pos1, UINT* Status2, long* Pos2);
	GET_STEPPER_STATUS_FP get_stepper_status;
	typedef void (__stdcall *N_SELECT_COR_TABLE_LIST_FP)(const UINT CardNo, const UINT HeadA, const UINT HeadB);
	N_SELECT_COR_TABLE_LIST_FP n_select_cor_table_list;
	typedef void (__stdcall *SELECT_COR_TABLE_LIST_FP)(const UINT HeadA, const UINT HeadB);
	SELECT_COR_TABLE_LIST_FP select_cor_table_list;
	typedef void (__stdcall *N_LIST_NOP_FP)(const UINT CardNo);
	N_LIST_NOP_FP n_list_nop;
	typedef void (__stdcall *N_LIST_CONTINUE_FP)(const UINT CardNo);
	N_LIST_CONTINUE_FP n_list_continue;
	typedef void (__stdcall *N_LIST_NEXT_FP)(const UINT CardNo);
	N_LIST_NEXT_FP n_list_next;
	typedef void (__stdcall *N_LONG_DELAY_FP)(const UINT CardNo, const UINT Delay);
	N_LONG_DELAY_FP n_long_delay;
	typedef void (__stdcall *N_SET_END_OF_LIST_FP)(const UINT CardNo);
	N_SET_END_OF_LIST_FP n_set_end_of_list;
	typedef void (__stdcall *N_SET_WAIT_FP)(const UINT CardNo, const UINT WaitWord);
	N_SET_WAIT_FP n_set_wait;
	typedef void (__stdcall *N_LIST_JUMP_POS_FP)(const UINT CardNo, const UINT Pos);
	N_LIST_JUMP_POS_FP n_list_jump_pos;
	typedef void (__stdcall *N_LIST_JUMP_REL_FP)(const UINT CardNo, const long Pos);
	N_LIST_JUMP_REL_FP n_list_jump_rel;
	typedef void (__stdcall *N_LIST_REPEAT_FP)(const UINT CardNo);
	N_LIST_REPEAT_FP n_list_repeat;
	typedef void (__stdcall *N_LIST_UNTIL_FP)(const UINT CardNo, const UINT Number);
	N_LIST_UNTIL_FP n_list_until;
	typedef void (__stdcall *N_RANGE_CHECKING_FP)(const UINT CardNo, const UINT HeadNo, const UINT Mode, const UINT Data);
	N_RANGE_CHECKING_FP n_range_checking;
	typedef void (__stdcall *N_SET_LIST_JUMP_FP)(const UINT CardNo, const UINT Pos);
	N_SET_LIST_JUMP_FP n_set_list_jump;
	typedef void (__stdcall *LIST_NOP_FP)(void);
	LIST_NOP_FP list_nop;
	typedef void (__stdcall *LIST_CONTINUE_FP)(void);
	LIST_CONTINUE_FP list_continue;
	typedef void (__stdcall *LIST_NEXT_FP)(void);
	LIST_NEXT_FP list_next;
	typedef void (__stdcall *LONG_DELAY_FP)(const UINT Delay);
	LONG_DELAY_FP long_delay;
	typedef void (__stdcall *SET_END_OF_LIST_FP)(void);
	SET_END_OF_LIST_FP set_end_of_list;
	typedef void (__stdcall *SET_WAIT_FP)(const UINT WaitWord);
	SET_WAIT_FP set_wait;
	typedef void (__stdcall *LIST_JUMP_POS_FP)(const UINT Pos);
	LIST_JUMP_POS_FP list_jump_pos;
	typedef void (__stdcall *LIST_JUMP_REL_FP)(const long Pos);
	LIST_JUMP_REL_FP list_jump_rel;
	typedef void (__stdcall *LIST_REPEAT_FP)(void);
	LIST_REPEAT_FP list_repeat;
	typedef void (__stdcall *LIST_UNTIL_FP)(const UINT Number);
	LIST_UNTIL_FP list_until;
	typedef void (__stdcall *RANGE_CHECKING_FP)(const UINT HeadNo, const UINT Mode, const UINT Data);
	RANGE_CHECKING_FP range_checking;
	typedef void (__stdcall *SET_LIST_JUMP_FP)(const UINT Pos);
	SET_LIST_JUMP_FP set_list_jump;
	typedef void (__stdcall *N_SET_EXTSTARTPOS_LIST_FP)(const UINT CardNo, const UINT Pos);
	N_SET_EXTSTARTPOS_LIST_FP n_set_extstartpos_list;
	typedef void (__stdcall *N_SET_CONTROL_MODE_LIST_FP)(const UINT CardNo, const UINT Mode);
	N_SET_CONTROL_MODE_LIST_FP n_set_control_mode_list;
	typedef void (__stdcall *N_SIMULATE_EXT_START_FP)(const UINT CardNo, const long Delay, const UINT EncoderNo);
	N_SIMULATE_EXT_START_FP n_simulate_ext_start;
	typedef void (__stdcall *SET_EXTSTARTPOS_LIST_FP)(const UINT Pos);
	SET_EXTSTARTPOS_LIST_FP set_extstartpos_list;
	typedef void (__stdcall *SET_CONTROL_MODE_LIST_FP)(const UINT Mode);
	SET_CONTROL_MODE_LIST_FP set_control_mode_list;
	typedef void (__stdcall *SIMULATE_EXT_START_FP)(const long Delay, const UINT EncoderNo);
	SIMULATE_EXT_START_FP simulate_ext_start;
	typedef void (__stdcall *N_LIST_RETURN_FP)(const UINT CardNo);
	N_LIST_RETURN_FP n_list_return;
	typedef void (__stdcall *N_LIST_CALL_FP)(const UINT CardNo, const UINT Pos);
	N_LIST_CALL_FP n_list_call;
	typedef void (__stdcall *N_LIST_CALL_ABS_FP)(const UINT CardNo, const UINT Pos);
	N_LIST_CALL_ABS_FP n_list_call_abs;
	typedef void (__stdcall *N_SUB_CALL_REPEAT_FP)(const UINT CardNo, const UINT Index, const UINT Number);
	N_SUB_CALL_REPEAT_FP n_sub_call_repeat;
	typedef void (__stdcall *N_SUB_CALL_ABS_REPEAT_FP)(const UINT CardNo, const UINT Index, const UINT Number);
	N_SUB_CALL_ABS_REPEAT_FP n_sub_call_abs_repeat;
	typedef void (__stdcall *N_SUB_CALL_FP)(const UINT CardNo, const UINT Index);
	N_SUB_CALL_FP n_sub_call;
	typedef void (__stdcall *N_SUB_CALL_ABS_FP)(const UINT CardNo, const UINT Index);
	N_SUB_CALL_ABS_FP n_sub_call_abs;
	typedef void (__stdcall *LIST_RETURN_FP)(void);
	LIST_RETURN_FP list_return;
	typedef void (__stdcall *LIST_CALL_FP)(const UINT Pos);
	LIST_CALL_FP list_call;
	typedef void (__stdcall *LIST_CALL_ABS_FP)(const UINT Pos);
	LIST_CALL_ABS_FP list_call_abs;
	typedef void (__stdcall *SUB_CALL_REPEAT_FP)(const UINT Index, const UINT Number);
	SUB_CALL_REPEAT_FP sub_call_repeat;
	typedef void (__stdcall *SUB_CALL_ABS_REPEAT_FP)(const UINT Index, const UINT Number);
	SUB_CALL_ABS_REPEAT_FP sub_call_abs_repeat;
	typedef void (__stdcall *SUB_CALL_FP)(const UINT Index);
	SUB_CALL_FP sub_call;
	typedef void (__stdcall *SUB_CALL_ABS_FP)(const UINT Index);
	SUB_CALL_ABS_FP sub_call_abs;
	typedef void (__stdcall *N_LIST_CALL_COND_FP)(const UINT CardNo, const UINT Mask1, const UINT Mask0, const UINT Pos);
	N_LIST_CALL_COND_FP n_list_call_cond;
	typedef void (__stdcall *N_LIST_CALL_ABS_COND_FP)(const UINT CardNo, const UINT Mask1, const UINT Mask0, const UINT Pos);
	N_LIST_CALL_ABS_COND_FP n_list_call_abs_cond;
	typedef void (__stdcall *N_SUB_CALL_COND_FP)(const UINT CardNo, const UINT Mask1, const UINT Mask0, const UINT Pos);
	N_SUB_CALL_COND_FP n_sub_call_cond;
	typedef void (__stdcall *N_SUB_CALL_ABS_COND_FP)(const UINT CardNo, const UINT Mask1, const UINT Mask0, const UINT Pos);
	N_SUB_CALL_ABS_COND_FP n_sub_call_abs_cond;
	typedef void (__stdcall *N_LIST_JUMP_POS_COND_FP)(const UINT CardNo, const UINT Mask1, const UINT Mask0, const UINT Index);
	N_LIST_JUMP_POS_COND_FP n_list_jump_pos_cond;
	typedef void (__stdcall *N_LIST_JUMP_REL_COND_FP)(const UINT CardNo, const UINT Mask1, const UINT Mask0, const long Index);
	N_LIST_JUMP_REL_COND_FP n_list_jump_rel_cond;
	typedef void (__stdcall *N_IF_COND_FP)(const UINT CardNo, const UINT Mask1, const UINT Mask0);
	N_IF_COND_FP n_if_cond;
	typedef void (__stdcall *N_IF_NOT_COND_FP)(const UINT CardNo, const UINT Mask1, const UINT Mask0);
	N_IF_NOT_COND_FP n_if_not_cond;
	typedef void (__stdcall *N_IF_PIN_COND_FP)(const UINT CardNo, const UINT Mask1, const UINT Mask0);
	N_IF_PIN_COND_FP n_if_pin_cond;
	typedef void (__stdcall *N_IF_NOT_PIN_COND_FP)(const UINT CardNo, const UINT Mask1, const UINT Mask0);
	N_IF_NOT_PIN_COND_FP n_if_not_pin_cond;
	typedef void (__stdcall *N_SWITCH_IOPORT_FP)(const UINT CardNo, const UINT MaskBits, const UINT ShiftBits);
	N_SWITCH_IOPORT_FP n_switch_ioport;
	typedef void (__stdcall *N_LIST_JUMP_COND_FP)(const UINT CardNo, const UINT Mask1, const UINT Mask0, const UINT Pos);
	N_LIST_JUMP_COND_FP n_list_jump_cond;
	typedef void (__stdcall *LIST_CALL_COND_FP)(const UINT Mask1, const UINT Mask0, const UINT Pos);
	LIST_CALL_COND_FP list_call_cond;
	typedef void (__stdcall *LIST_CALL_ABS_COND_FP)(const UINT Mask1, const UINT Mask0, const UINT Pos);
	LIST_CALL_ABS_COND_FP list_call_abs_cond;
	typedef void (__stdcall *SUB_CALL_COND_FP)(const UINT Mask1, const UINT Mask0, const UINT Index);
	SUB_CALL_COND_FP sub_call_cond;
	typedef void (__stdcall *SUB_CALL_ABS_COND_FP)(const UINT Mask1, const UINT Mask0, const UINT Index);
	SUB_CALL_ABS_COND_FP sub_call_abs_cond;
	typedef void (__stdcall *LIST_JUMP_POS_COND_FP)(const UINT Mask1, const UINT Mask0, const UINT Pos);
	LIST_JUMP_POS_COND_FP list_jump_pos_cond;
	typedef void (__stdcall *LIST_JUMP_REL_COND_FP)(const UINT Mask1, const UINT Mask0, const long Pos);
	LIST_JUMP_REL_COND_FP list_jump_rel_cond;
	typedef void (__stdcall *IF_COND_FP)(const UINT Mask1, const UINT Mask0);
	IF_COND_FP if_cond;
	typedef void (__stdcall *IF_NOT_COND_FP)(const UINT Mask1, const UINT Mask0);
	IF_NOT_COND_FP if_not_cond;
	typedef void (__stdcall *IF_PIN_COND_FP)(const UINT Mask1, const UINT Mask0);
	IF_PIN_COND_FP if_pin_cond;
	typedef void (__stdcall *IF_NOT_PIN_COND_FP)(const UINT Mask1, const UINT Mask0);
	IF_NOT_PIN_COND_FP if_not_pin_cond;
	typedef void (__stdcall *SWITCH_IOPORT_FP)(const UINT MaskBits, const UINT ShiftBits);
	SWITCH_IOPORT_FP switch_ioport;
	typedef void (__stdcall *LIST_JUMP_COND_FP)(const UINT Mask1, const UINT Mask0, const UINT Pos);
	LIST_JUMP_COND_FP list_jump_cond;
	typedef void (__stdcall *N_SELECT_CHAR_SET_FP)(const UINT CardNo, const UINT No);
	N_SELECT_CHAR_SET_FP n_select_char_set;
	typedef void (__stdcall *N_MARK_TEXT_FP)(const UINT CardNo, const char* Text);
	N_MARK_TEXT_FP n_mark_text;
	typedef void (__stdcall *N_MARK_TEXT_ABS_FP)(const UINT CardNo, const char* Text);
	N_MARK_TEXT_ABS_FP n_mark_text_abs;
	typedef void (__stdcall *N_MARK_CHAR_FP)(const UINT CardNo, const UINT Char);
	N_MARK_CHAR_FP n_mark_char;
	typedef void (__stdcall *N_MARK_CHAR_ABS_FP)(const UINT CardNo, const UINT Char);
	N_MARK_CHAR_ABS_FP n_mark_char_abs;
	typedef void (__stdcall *SELECT_CHAR_SET_FP)(const UINT No);
	SELECT_CHAR_SET_FP select_char_set;
	typedef void (__stdcall *MARK_TEXT_FP)(const char* Text);
	MARK_TEXT_FP mark_text;
	typedef void (__stdcall *MARK_TEXT_ABS_FP)(const char* Text);
	MARK_TEXT_ABS_FP mark_text_abs;
	typedef void (__stdcall *MARK_CHAR_FP)(const UINT Char);
	MARK_CHAR_FP mark_char;
	typedef void (__stdcall *MARK_CHAR_ABS_FP)(const UINT Char);
	MARK_CHAR_ABS_FP mark_char_abs;
	typedef void (__stdcall *N_MARK_SERIAL_FP)(const UINT CardNo, const UINT Mode, const UINT Digits);
	N_MARK_SERIAL_FP n_mark_serial;
	typedef void (__stdcall *N_MARK_SERIAL_ABS_FP)(const UINT CardNo, const UINT Mode, const UINT Digits);
	N_MARK_SERIAL_ABS_FP n_mark_serial_abs;
	typedef void (__stdcall *N_MARK_DATE_FP)(const UINT CardNo, const UINT Part, const UINT Mode);
	N_MARK_DATE_FP n_mark_date;
	typedef void (__stdcall *N_MARK_DATE_ABS_FP)(const UINT CardNo, const UINT Part, const UINT Mode);
	N_MARK_DATE_ABS_FP n_mark_date_abs;
	typedef void (__stdcall *N_MARK_TIME_FP)(const UINT CardNo, const UINT Part, const UINT Mode);
	N_MARK_TIME_FP n_mark_time;
	typedef void (__stdcall *N_MARK_TIME_ABS_FP)(const UINT CardNo, const UINT Part, const UINT Mode);
	N_MARK_TIME_ABS_FP n_mark_time_abs;
	typedef void (__stdcall *N_SELECT_SERIAL_SET_LIST_FP)(const UINT CardNo, const UINT No);
	N_SELECT_SERIAL_SET_LIST_FP n_select_serial_set_list;
	typedef void (__stdcall *N_SET_SERIAL_STEP_LIST_FP)(const UINT CardNo, const UINT No, const UINT Step);
	N_SET_SERIAL_STEP_LIST_FP n_set_serial_step_list;
	typedef void (__stdcall *N_TIME_FIX_F_OFF_FP)(const UINT CardNo, const UINT FirstDay, const UINT Offset);
	N_TIME_FIX_F_OFF_FP n_time_fix_f_off;
	typedef void (__stdcall *N_TIME_FIX_F_FP)(const UINT CardNo, const UINT FirstDay);
	N_TIME_FIX_F_FP n_time_fix_f;
	typedef void (__stdcall *N_TIME_FIX_FP)(const UINT CardNo);
	N_TIME_FIX_FP n_time_fix;
	typedef void (__stdcall *MARK_SERIAL_FP)(const UINT Mode, const UINT Digits);
	MARK_SERIAL_FP mark_serial;
	typedef void (__stdcall *MARK_SERIAL_ABS_FP)(const UINT Mode, const UINT Digits);
	MARK_SERIAL_ABS_FP mark_serial_abs;
	typedef void (__stdcall *MARK_DATE_FP)(const UINT Part, const UINT Mode);
	MARK_DATE_FP mark_date;
	typedef void (__stdcall *MARK_DATE_ABS_FP)(const UINT Part, const UINT Mode);
	MARK_DATE_ABS_FP mark_date_abs;
	typedef void (__stdcall *MARK_TIME_FP)(const UINT Part, const UINT Mode);
	MARK_TIME_FP mark_time;
	typedef void (__stdcall *MARK_TIME_ABS_FP)(const UINT Part, const UINT Mode);
	MARK_TIME_ABS_FP mark_time_abs;
	typedef void (__stdcall *TIME_FIX_F_OFF_FP)(const UINT FirstDay, const UINT Offset);
	TIME_FIX_F_OFF_FP time_fix_f_off;
	typedef void (__stdcall *SELECT_SERIAL_SET_LIST_FP)(const UINT No);
	SELECT_SERIAL_SET_LIST_FP select_serial_set_list;
	typedef void (__stdcall *SET_SERIAL_STEP_LIST_FP)(const UINT No, const UINT Step);
	SET_SERIAL_STEP_LIST_FP set_serial_step_list;
	typedef void (__stdcall *TIME_FIX_F_FP)(const UINT FirstDay);
	TIME_FIX_F_FP time_fix_f;
	typedef void (__stdcall *TIME_FIX_FP)(void);
	TIME_FIX_FP time_fix;
	typedef void (__stdcall *N_CLEAR_IO_COND_LIST_FP)(const UINT CardNo, const UINT Mask1, const UINT Mask0, const UINT Mask);
	N_CLEAR_IO_COND_LIST_FP n_clear_io_cond_list;
	typedef void (__stdcall *N_SET_IO_COND_LIST_FP)(const UINT CardNo, const UINT Mask1, const UINT Mask0, const UINT Mask);
	N_SET_IO_COND_LIST_FP n_set_io_cond_list;
	typedef void (__stdcall *N_WRITE_IO_PORT_MASK_LIST_FP)(const UINT CardNo, const UINT Value, const UINT Mask);
	N_WRITE_IO_PORT_MASK_LIST_FP n_write_io_port_mask_list;
	typedef void (__stdcall *N_WRITE_8BIT_PORT_LIST_FP)(const UINT CardNo, const UINT Value);
	N_WRITE_8BIT_PORT_LIST_FP n_write_8bit_port_list;
	typedef void (__stdcall *N_READ_IO_PORT_LIST_FP)(const UINT CardNo);
	N_READ_IO_PORT_LIST_FP n_read_io_port_list;
	typedef void (__stdcall *N_WRITE_DA_X_LIST_FP)(const UINT CardNo, const UINT x, const UINT Value);
	N_WRITE_DA_X_LIST_FP n_write_da_x_list;
	typedef void (__stdcall *N_WRITE_IO_PORT_LIST_FP)(const UINT CardNo, const UINT Value);
	N_WRITE_IO_PORT_LIST_FP n_write_io_port_list;
	typedef void (__stdcall *N_WRITE_DA_1_LIST_FP)(const UINT CardNo, const UINT Value);
	N_WRITE_DA_1_LIST_FP n_write_da_1_list;
	typedef void (__stdcall *N_WRITE_DA_2_LIST_FP)(const UINT CardNo, const UINT Value);
	N_WRITE_DA_2_LIST_FP n_write_da_2_list;
	typedef void (__stdcall *CLEAR_IO_COND_LIST_FP)(const UINT Mask1, const UINT Mask0, const UINT MaskClear);
	CLEAR_IO_COND_LIST_FP clear_io_cond_list;
	typedef void (__stdcall *SET_IO_COND_LIST_FP)(const UINT Mask1, const UINT Mask0, const UINT MaskSet);
	SET_IO_COND_LIST_FP set_io_cond_list;
	typedef void (__stdcall *WRITE_IO_PORT_MASK_LIST_FP)(const UINT Value, const UINT Mask);
	WRITE_IO_PORT_MASK_LIST_FP write_io_port_mask_list;
	typedef void (__stdcall *WRITE_8BIT_PORT_LIST_FP)(const UINT Value);
	WRITE_8BIT_PORT_LIST_FP write_8bit_port_list;
	typedef void (__stdcall *READ_IO_PORT_LIST_FP)(void);
	READ_IO_PORT_LIST_FP read_io_port_list;
	typedef void (__stdcall *WRITE_DA_X_LIST_FP)(const UINT x, const UINT Value);
	WRITE_DA_X_LIST_FP write_da_x_list;
	typedef void (__stdcall *WRITE_IO_PORT_LIST_FP)(const UINT Value);
	WRITE_IO_PORT_LIST_FP write_io_port_list;
	typedef void (__stdcall *WRITE_DA_1_LIST_FP)(const UINT Value);
	WRITE_DA_1_LIST_FP write_da_1_list;
	typedef void (__stdcall *WRITE_DA_2_LIST_FP)(const UINT Value);
	WRITE_DA_2_LIST_FP write_da_2_list;
	typedef void (__stdcall *N_LASER_SIGNAL_ON_LIST_FP)(const UINT CardNo);
	N_LASER_SIGNAL_ON_LIST_FP n_laser_signal_on_list;
	typedef void (__stdcall *N_LASER_SIGNAL_OFF_LIST_FP)(const UINT CardNo);
	N_LASER_SIGNAL_OFF_LIST_FP n_laser_signal_off_list;
	typedef void (__stdcall *N_PARA_LASER_ON_PULSES_LIST_FP)(const UINT CardNo, const UINT Period, const UINT Pulses, const UINT P);
	N_PARA_LASER_ON_PULSES_LIST_FP n_para_laser_on_pulses_list;
	typedef void (__stdcall *N_LASER_ON_PULSES_LIST_FP)(const UINT CardNo, const UINT Period, const UINT Pulses);
	N_LASER_ON_PULSES_LIST_FP n_laser_on_pulses_list;
	typedef void (__stdcall *N_LASER_ON_LIST_FP)(const UINT CardNo, const UINT Period);
	N_LASER_ON_LIST_FP n_laser_on_list;
	typedef void (__stdcall *N_SET_LASER_DELAYS_FP)(const UINT CardNo, const long LaserOnDelay, const UINT LaserOffDelay);
	N_SET_LASER_DELAYS_FP n_set_laser_delays;
	typedef void (__stdcall *N_SET_STANDBY_LIST_FP)(const UINT CardNo, const UINT HalfPeriod, const UINT PulseLength);
	N_SET_STANDBY_LIST_FP n_set_standby_list;
	typedef void (__stdcall *N_SET_LASER_PULSES_FP)(const UINT CardNo, const UINT HalfPeriod, const UINT PulseLength);
	N_SET_LASER_PULSES_FP n_set_laser_pulses;
	typedef void (__stdcall *N_SET_FIRSTPULSE_KILLER_LIST_FP)(const UINT CardNo, const UINT Length);
	N_SET_FIRSTPULSE_KILLER_LIST_FP n_set_firstpulse_killer_list;
	typedef void (__stdcall *N_SET_QSWITCH_DELAY_LIST_FP)(const UINT CardNo, const UINT Delay);
	N_SET_QSWITCH_DELAY_LIST_FP n_set_qswitch_delay_list;
	typedef void (__stdcall *N_SET_LASER_PIN_OUT_LIST_FP)(const UINT CardNo, const UINT Pins);
	N_SET_LASER_PIN_OUT_LIST_FP n_set_laser_pin_out_list;
	typedef void (__stdcall *N_SET_VECTOR_CONTROL_FP)(const UINT CardNo, const UINT Ctrl, const UINT Value);
	N_SET_VECTOR_CONTROL_FP n_set_vector_control;
	typedef void (__stdcall *N_SET_DEFAULT_PIXEL_LIST_FP)(const UINT CardNo, const UINT PulseLength);
	N_SET_DEFAULT_PIXEL_LIST_FP n_set_default_pixel_list;
	typedef void (__stdcall *N_SET_AUTO_LASER_PARAMS_LIST_FP)(const UINT CardNo, const UINT Ctrl, const UINT Value, const UINT MinValue, const UINT MaxValue);
	N_SET_AUTO_LASER_PARAMS_LIST_FP n_set_auto_laser_params_list;
	typedef void (__stdcall *N_SET_PULSE_PICKING_LIST_FP)(const UINT CardNo, const UINT No);
	N_SET_PULSE_PICKING_LIST_FP n_set_pulse_picking_list;
	typedef void (__stdcall *N_SET_SOFTSTART_LEVEL_LIST_FP)(const UINT CardNo, const UINT Index, const UINT Level1, const UINT Level2, const UINT Level3);
	N_SET_SOFTSTART_LEVEL_LIST_FP n_set_softstart_level_list;
	typedef void (__stdcall *N_SET_SOFTSTART_MODE_LIST_FP)(const UINT CardNo, const UINT Mode, const UINT Number, const UINT Delay);
	N_SET_SOFTSTART_MODE_LIST_FP n_set_softstart_mode_list;
	typedef void (__stdcall *N_CONFIG_LASER_SIGNALS_LIST_FP)(const UINT CardNo, const UINT Config);
	N_CONFIG_LASER_SIGNALS_LIST_FP n_config_laser_signals_list;
	typedef void (__stdcall *N_SET_LASER_TIMING_FP)(const UINT CardNo, const UINT HalfPeriod, const UINT PulseLength1, const UINT PulseLength2, const UINT TimeBase);
	N_SET_LASER_TIMING_FP n_set_laser_timing;
	typedef void (__stdcall *LASER_SIGNAL_ON_LIST_FP)(void);
	LASER_SIGNAL_ON_LIST_FP laser_signal_on_list;
	typedef void (__stdcall *LASER_SIGNAL_OFF_LIST_FP)(void);
	LASER_SIGNAL_OFF_LIST_FP laser_signal_off_list;
	typedef void (__stdcall *PARA_LASER_ON_PULSES_LIST_FP)(const UINT Period, const UINT Pulses, const UINT P);
	PARA_LASER_ON_PULSES_LIST_FP para_laser_on_pulses_list;
	typedef void (__stdcall *LASER_ON_PULSES_LIST_FP)(const UINT Period, const UINT Pulses);
	LASER_ON_PULSES_LIST_FP laser_on_pulses_list;
	typedef void (__stdcall *LASER_ON_LIST_FP)(const UINT Period);
	LASER_ON_LIST_FP laser_on_list;
	typedef void (__stdcall *SET_LASER_DELAYS_FP)(const long LaserOnDelay, const UINT LaserOffDelay);
	SET_LASER_DELAYS_FP set_laser_delays;
	typedef void (__stdcall *SET_STANDBY_LIST_FP)(const UINT HalfPeriod, const UINT PulseLength);
	SET_STANDBY_LIST_FP set_standby_list;
	typedef void (__stdcall *SET_LASER_PULSES_FP)(const UINT HalfPeriod, const UINT PulseLength);
	SET_LASER_PULSES_FP set_laser_pulses;
	typedef void (__stdcall *SET_FIRSTPULSE_KILLER_LIST_FP)(const UINT Length);
	SET_FIRSTPULSE_KILLER_LIST_FP set_firstpulse_killer_list;
	typedef void (__stdcall *SET_QSWITCH_DELAY_LIST_FP)(const UINT Delay);
	SET_QSWITCH_DELAY_LIST_FP set_qswitch_delay_list;
	typedef void (__stdcall *SET_LASER_PIN_OUT_LIST_FP)(const UINT Pins);
	SET_LASER_PIN_OUT_LIST_FP set_laser_pin_out_list;
	typedef void (__stdcall *SET_VECTOR_CONTROL_FP)(const UINT Ctrl, const UINT Value);
	SET_VECTOR_CONTROL_FP set_vector_control;
	typedef void (__stdcall *SET_DEFAULT_PIXEL_LIST_FP)(const UINT PulseLength);
	SET_DEFAULT_PIXEL_LIST_FP set_default_pixel_list;
	typedef void (__stdcall *SET_AUTO_LASER_PARAMS_LIST_FP)(const UINT Ctrl, const UINT Value, const UINT MinValue, const UINT MaxValue);
	SET_AUTO_LASER_PARAMS_LIST_FP set_auto_laser_params_list;
	typedef void (__stdcall *SET_PULSE_PICKING_LIST_FP)(const UINT No);
	SET_PULSE_PICKING_LIST_FP set_pulse_picking_list;
	typedef void (__stdcall *SET_SOFTSTART_LEVEL_LIST_FP)(const UINT Index, const UINT Level1, const UINT Level2, const UINT Level3);
	SET_SOFTSTART_LEVEL_LIST_FP set_softstart_level_list;
	typedef void (__stdcall *SET_SOFTSTART_MODE_LIST_FP)(const UINT Mode, const UINT Number, const UINT Delay);
	SET_SOFTSTART_MODE_LIST_FP set_softstart_mode_list;
	typedef void (__stdcall *CONFIG_LASER_SIGNALS_LIST_FP)(const UINT Config);
	CONFIG_LASER_SIGNALS_LIST_FP config_laser_signals_list;
	typedef void (__stdcall *SET_LASER_TIMING_FP)(const UINT HalfPeriod, const UINT PulseLength1, const UINT PulseLength2, const UINT TimeBase);
	SET_LASER_TIMING_FP set_laser_timing;
	typedef void (__stdcall *N_FLY_RETURN_Z_FP)(const UINT CardNo, const long X, const long Y, const long Z);
	N_FLY_RETURN_Z_FP n_fly_return_z;
	typedef void (__stdcall *N_FLY_RETURN_FP)(const UINT CardNo, const long X, const long Y);
	N_FLY_RETURN_FP n_fly_return;
	typedef void (__stdcall *N_SET_ROT_CENTER_LIST_FP)(const UINT CardNo, const long X, const long Y);
	N_SET_ROT_CENTER_LIST_FP n_set_rot_center_list;
	typedef void (__stdcall *N_SET_EXT_START_DELAY_LIST_FP)(const UINT CardNo, const long Delay, const UINT EncoderNo);
	N_SET_EXT_START_DELAY_LIST_FP n_set_ext_start_delay_list;
	typedef void (__stdcall *N_SET_FLY_X_FP)(const UINT CardNo, const double ScaleX);
	N_SET_FLY_X_FP n_set_fly_x;
	typedef void (__stdcall *N_SET_FLY_Y_FP)(const UINT CardNo, const double ScaleY);
	N_SET_FLY_Y_FP n_set_fly_y;
	typedef void (__stdcall *N_SET_FLY_Z_FP)(const UINT CardNo, const double ScaleZ, const UINT EndoderNo);
	N_SET_FLY_Z_FP n_set_fly_z;
	typedef void (__stdcall *N_SET_FLY_ROT_FP)(const UINT CardNo, const double Resolution);
	N_SET_FLY_ROT_FP n_set_fly_rot;
	typedef void (__stdcall *N_SET_FLY_2D_FP)(const UINT CardNo, const double ScaleX, const double ScaleY);
	N_SET_FLY_2D_FP n_set_fly_2d;
	typedef void (__stdcall *N_SET_FLY_X_POS_FP)(const UINT CardNo, const double ScaleX);
	N_SET_FLY_X_POS_FP n_set_fly_x_pos;
	typedef void (__stdcall *N_SET_FLY_Y_POS_FP)(const UINT CardNo, const double ScaleY);
	N_SET_FLY_Y_POS_FP n_set_fly_y_pos;
	typedef void (__stdcall *N_SET_FLY_ROT_POS_FP)(const UINT CardNo, const double Resolution);
	N_SET_FLY_ROT_POS_FP n_set_fly_rot_pos;
	typedef void (__stdcall *N_SET_FLY_LIMITS_FP)(const UINT CardNo, const long Xmin, const long Xmax, const long Ymin, const long Ymax);
	N_SET_FLY_LIMITS_FP n_set_fly_limits;
	typedef void (__stdcall *N_SET_FLY_LIMITS_Z_FP)(const UINT CardNo, const long Zmin, const long Zmax);
	N_SET_FLY_LIMITS_Z_FP n_set_fly_limits_z;
	typedef void (__stdcall *N_IF_FLY_X_OVERFLOW_FP)(const UINT CardNo, const long Mode);
	N_IF_FLY_X_OVERFLOW_FP n_if_fly_x_overflow;
	typedef void (__stdcall *N_IF_FLY_Y_OVERFLOW_FP)(const UINT CardNo, const long Mode);
	N_IF_FLY_Y_OVERFLOW_FP n_if_fly_y_overflow;
	typedef void (__stdcall *N_IF_FLY_Z_OVERFLOW_FP)(const UINT CardNo, const long Mode);
	N_IF_FLY_Z_OVERFLOW_FP n_if_fly_z_overflow;
	typedef void (__stdcall *N_IF_NOT_FLY_X_OVERFLOW_FP)(const UINT CardNo, const long Mode);
	N_IF_NOT_FLY_X_OVERFLOW_FP n_if_not_fly_x_overflow;
	typedef void (__stdcall *N_IF_NOT_FLY_Y_OVERFLOW_FP)(const UINT CardNo, const long Mode);
	N_IF_NOT_FLY_Y_OVERFLOW_FP n_if_not_fly_y_overflow;
	typedef void (__stdcall *N_IF_NOT_FLY_Z_OVERFLOW_FP)(const UINT CardNo, const long Mode);
	N_IF_NOT_FLY_Z_OVERFLOW_FP n_if_not_fly_z_overflow;
	typedef void (__stdcall *N_CLEAR_FLY_OVERFLOW_FP)(const UINT CardNo, const UINT Mode);
	N_CLEAR_FLY_OVERFLOW_FP n_clear_fly_overflow;
	typedef void (__stdcall *N_SET_MCBSP_X_LIST_FP)(const UINT CardNo, const double ScaleX);
	N_SET_MCBSP_X_LIST_FP n_set_mcbsp_x_list;
	typedef void (__stdcall *N_SET_MCBSP_Y_LIST_FP)(const UINT CardNo, const double ScaleY);
	N_SET_MCBSP_Y_LIST_FP n_set_mcbsp_y_list;
	typedef void (__stdcall *N_SET_MCBSP_ROT_LIST_FP)(const UINT CardNo, const double Resolution);
	N_SET_MCBSP_ROT_LIST_FP n_set_mcbsp_rot_list;
	typedef void (__stdcall *N_SET_MCBSP_MATRIX_LIST_FP)(const UINT CardNo);
	N_SET_MCBSP_MATRIX_LIST_FP n_set_mcbsp_matrix_list;
	typedef void (__stdcall *N_SET_MCBSP_IN_LIST_FP)(const UINT CardNo, const UINT Mode, const double Scale);
	N_SET_MCBSP_IN_LIST_FP n_set_mcbsp_in_list;
	typedef void (__stdcall *N_SET_MULTI_MCBSP_IN_LIST_FP)(const UINT CardNo, const UINT Ctrl, const UINT P, const UINT Mode);
	N_SET_MULTI_MCBSP_IN_LIST_FP n_set_multi_mcbsp_in_list;
	typedef void (__stdcall *N_WAIT_FOR_ENCODER_MODE_FP)(const UINT CardNo, const long Value, const UINT EncoderNo, const long Mode);
	N_WAIT_FOR_ENCODER_MODE_FP n_wait_for_encoder_mode;
	typedef void (__stdcall *N_WAIT_FOR_MCBSP_FP)(const UINT CardNo, const UINT Axis, const long Value, const long Mode);
	N_WAIT_FOR_MCBSP_FP n_wait_for_mcbsp;
	typedef void (__stdcall *N_SET_ENCODER_SPEED_FP)(const UINT CardNo, const UINT EncoderNo, const double Speed, const double Smooth);
	N_SET_ENCODER_SPEED_FP n_set_encoder_speed;
	typedef void (__stdcall *N_GET_MCBSP_LIST_FP)(const UINT CardNo);
	N_GET_MCBSP_LIST_FP n_get_mcbsp_list;
	typedef void (__stdcall *N_STORE_ENCODER_FP)(const UINT CardNo, const UINT Pos);
	N_STORE_ENCODER_FP n_store_encoder;
	typedef void (__stdcall *N_WAIT_FOR_ENCODER_IN_RANGE_FP)(const UINT CardNo, const long EncXmin, const long EncXmax, const long EncYmin, const long EncYmax);
	N_WAIT_FOR_ENCODER_IN_RANGE_FP n_wait_for_encoder_in_range;
	typedef void (__stdcall *N_ACTIVATE_FLY_XY_FP)(const UINT CardNo, const double ScaleX, const double ScaleY);
	N_ACTIVATE_FLY_XY_FP n_activate_fly_xy;
	typedef void (__stdcall *N_ACTIVATE_FLY_2D_FP)(const UINT CardNo, const double ScaleX, const double ScaleY);
	N_ACTIVATE_FLY_2D_FP n_activate_fly_2d;
	typedef void (__stdcall *N_IF_NOT_ACTIVATED_FP)(const UINT CardNo);
	N_IF_NOT_ACTIVATED_FP n_if_not_activated;
	typedef void (__stdcall *N_PARK_POSITION_FP)(const UINT CardNo, const UINT Mode, const long X, const long Y);
	N_PARK_POSITION_FP n_park_position;
	typedef void (__stdcall *N_PARK_RETURN_FP)(const UINT CardNo, const UINT Mode, const long X, const long Y);
	N_PARK_RETURN_FP n_park_return;
	typedef void (__stdcall *N_WAIT_FOR_ENCODER_FP)(const UINT CardNo, const long Value, const UINT EncoderNo);
	N_WAIT_FOR_ENCODER_FP n_wait_for_encoder;
	typedef void (__stdcall *FLY_RETURN_Z_FP)(const long X, const long Y, const long Z);
	FLY_RETURN_Z_FP fly_return_z;
	typedef void (__stdcall *FLY_RETURN_FP)(const long X, const long Y);
	FLY_RETURN_FP fly_return;
	typedef void (__stdcall *SET_ROT_CENTER_LIST_FP)(const long X, const long Y);
	SET_ROT_CENTER_LIST_FP set_rot_center_list;
	typedef void (__stdcall *SET_EXT_START_DELAY_LIST_FP)(const long Delay, const UINT EncoderNo);
	SET_EXT_START_DELAY_LIST_FP set_ext_start_delay_list;
	typedef void (__stdcall *SET_FLY_X_FP)(const double ScaleX);
	SET_FLY_X_FP set_fly_x;
	typedef void (__stdcall *SET_FLY_Y_FP)(const double ScaleY);
	SET_FLY_Y_FP set_fly_y;
	typedef void (__stdcall *SET_FLY_Z_FP)(const double ScaleZ, const UINT EncoderNo);
	SET_FLY_Z_FP set_fly_z;
	typedef void (__stdcall *SET_FLY_ROT_FP)(const double Resolution);
	SET_FLY_ROT_FP set_fly_rot;
	typedef void (__stdcall *SET_FLY_2D_FP)(const double ScaleX, const double ScaleY);
	SET_FLY_2D_FP set_fly_2d;
	typedef void (__stdcall *SET_FLY_X_POS_FP)(const double ScaleX);
	SET_FLY_X_POS_FP set_fly_x_pos;
	typedef void (__stdcall *SET_FLY_Y_POS_FP)(const double ScaleY);
	SET_FLY_Y_POS_FP set_fly_y_pos;
	typedef void (__stdcall *SET_FLY_ROT_POS_FP)(const double Resolution);
	SET_FLY_ROT_POS_FP set_fly_rot_pos;
	typedef void (__stdcall *SET_FLY_LIMITS_FP)(const long Xmin, const long Xmax, const long Ymin, const long Ymax);
	SET_FLY_LIMITS_FP set_fly_limits;
	typedef void (__stdcall *SET_FLY_LIMITS_Z_FP)(const long Zmin, const long Zmax);
	SET_FLY_LIMITS_Z_FP set_fly_limits_z;
	typedef void (__stdcall *IF_FLY_X_OVERFLOW_FP)(const long Mode);
	IF_FLY_X_OVERFLOW_FP if_fly_x_overflow;
	typedef void (__stdcall *IF_FLY_Y_OVERFLOW_FP)(const long Mode);
	IF_FLY_Y_OVERFLOW_FP if_fly_y_overflow;
	typedef void (__stdcall *IF_FLY_Z_OVERFLOW_FP)(const long Mode);
	IF_FLY_Z_OVERFLOW_FP if_fly_z_overflow;
	typedef void (__stdcall *IF_NOT_FLY_X_OVERFLOW_FP)(const long Mode);
	IF_NOT_FLY_X_OVERFLOW_FP if_not_fly_x_overflow;
	typedef void (__stdcall *IF_NOT_FLY_Y_OVERFLOW_FP)(const long Mode);
	IF_NOT_FLY_Y_OVERFLOW_FP if_not_fly_y_overflow;
	typedef void (__stdcall *IF_NOT_FLY_Z_OVERFLOW_FP)(const long Mode);
	IF_NOT_FLY_Z_OVERFLOW_FP if_not_fly_z_overflow;
	typedef void (__stdcall *CLEAR_FLY_OVERFLOW_FP)(const UINT Mode);
	CLEAR_FLY_OVERFLOW_FP clear_fly_overflow;
	typedef void (__stdcall *SET_MCBSP_X_LIST_FP)(const double ScaleX);
	SET_MCBSP_X_LIST_FP set_mcbsp_x_list;
	typedef void (__stdcall *SET_MCBSP_Y_LIST_FP)(const double ScaleY);
	SET_MCBSP_Y_LIST_FP set_mcbsp_y_list;
	typedef void (__stdcall *SET_MCBSP_ROT_LIST_FP)(const double Resolution);
	SET_MCBSP_ROT_LIST_FP set_mcbsp_rot_list;
	typedef void (__stdcall *SET_MCBSP_MATRIX_LIST_FP)(void);
	SET_MCBSP_MATRIX_LIST_FP set_mcbsp_matrix_list;
	typedef void (__stdcall *SET_MCBSP_IN_LIST_FP)(const UINT Mode, const double Scale);
	SET_MCBSP_IN_LIST_FP set_mcbsp_in_list;
	typedef void (__stdcall *SET_MULTI_MCBSP_IN_LIST_FP)(const UINT Ctrl, const UINT P, const UINT Mode);
	SET_MULTI_MCBSP_IN_LIST_FP set_multi_mcbsp_in_list;
	typedef void (__stdcall *WAIT_FOR_ENCODER_MODE_FP)(const long Value, const UINT EncoderNo, const long Mode);
	WAIT_FOR_ENCODER_MODE_FP wait_for_encoder_mode;
	typedef void (__stdcall *WAIT_FOR_MCBSP_FP)(const UINT Axis, const long Value, const long Mode);
	WAIT_FOR_MCBSP_FP wait_for_mcbsp;
	typedef void (__stdcall *SET_ENCODER_SPEED_FP)(const UINT EncoderNo, const double Speed, const double Smooth);
	SET_ENCODER_SPEED_FP set_encoder_speed;
	typedef void (__stdcall *GET_MCBSP_LIST_FP)(void);
	GET_MCBSP_LIST_FP get_mcbsp_list;
	typedef void (__stdcall *STORE_ENCODER_FP)(const UINT Pos);
	STORE_ENCODER_FP store_encoder;
	typedef void (__stdcall *WAIT_FOR_ENCODER_IN_RANGE_FP)(const long EncXmin, const long EncXmax, const long EncYmin, const long EncYmax);
	WAIT_FOR_ENCODER_IN_RANGE_FP wait_for_encoder_in_range;
	typedef void (__stdcall *ACTIVATE_FLY_XY_FP)(const double ScaleX, const double ScaleY);
	ACTIVATE_FLY_XY_FP activate_fly_xy;
	typedef void (__stdcall *ACTIVATE_FLY_2D_FP)(const double ScaleX, const double ScaleY);
	ACTIVATE_FLY_2D_FP activate_fly_2d;
	typedef void (__stdcall *IF_NOT_ACTIVATED_FP)(void);
	IF_NOT_ACTIVATED_FP if_not_activated;
	typedef void (__stdcall *PARK_POSITION_FP)(const UINT Mode, const long X, const long Y);
	PARK_POSITION_FP park_position;
	typedef void (__stdcall *PARK_RETURN_FP)(const UINT Mode, const long X, const long Y);
	PARK_RETURN_FP park_return;
	typedef void (__stdcall *WAIT_FOR_ENCODER_FP)(const long Value, const UINT EncoderNo);
	WAIT_FOR_ENCODER_FP wait_for_encoder;
	typedef void (__stdcall *N_SAVE_AND_RESTART_TIMER_FP)(const UINT CardNo);
	N_SAVE_AND_RESTART_TIMER_FP n_save_and_restart_timer;
	typedef void (__stdcall *N_SET_WOBBEL_FP)(const UINT CardNo, const UINT Transversal, const UINT Longitudinal, const double Freq);
	N_SET_WOBBEL_FP n_set_wobbel;
	typedef void (__stdcall *N_SET_WOBBEL_MODE_FP)(const UINT CardNo, const UINT Transversal, const UINT Longitudinal, const double Freq, const long Mode);
	N_SET_WOBBEL_MODE_FP n_set_wobbel_mode;
	typedef void (__stdcall *N_SET_WOBBEL_DIRECTION_FP)(const UINT CardNo, const long dX, const long dY);
	N_SET_WOBBEL_DIRECTION_FP n_set_wobbel_direction;
	typedef void (__stdcall *N_SET_WOBBEL_CONTROL_FP)(const UINT CardNo, const UINT Ctrl, const UINT Value, const UINT MinValue, const UINT MaxValue);
	N_SET_WOBBEL_CONTROL_FP n_set_wobbel_control;
	typedef void (__stdcall *N_SET_WOBBEL_VECTOR_FP)(const UINT CardNo, const double dTrans, const double dLong, const UINT Period, const double dPower);
	N_SET_WOBBEL_VECTOR_FP n_set_wobbel_vector;
	typedef void (__stdcall *N_SET_WOBBEL_OFFSET_FP)(const UINT CardNo, const long OffsetTrans, const long OffsetLong);
	N_SET_WOBBEL_OFFSET_FP n_set_wobbel_offset;
	typedef void (__stdcall *N_SET_TRIGGER_FP)(const UINT CardNo, const UINT Period, const UINT Signal1, const UINT Signal2);
	N_SET_TRIGGER_FP n_set_trigger;
	typedef void (__stdcall *N_SET_TRIGGER4_FP)(const UINT CardNo, const UINT Period, const UINT Signal1, const UINT Signal2, const UINT Signal3, const UINT Signal4);
	N_SET_TRIGGER4_FP n_set_trigger4;
	typedef void (__stdcall *N_SET_PIXEL_LINE_3D_FP)(const UINT CardNo, const UINT Channel, const UINT HalfPeriod, const double dX, const double dY, const double dZ);
	N_SET_PIXEL_LINE_3D_FP n_set_pixel_line_3d;
	typedef void (__stdcall *N_SET_PIXEL_LINE_FP)(const UINT CardNo, const UINT Channel, const UINT HalfPeriod, const double dX, const double dY);
	N_SET_PIXEL_LINE_FP n_set_pixel_line;
	typedef void (__stdcall *N_SET_N_PIXEL_FP)(const UINT CardNo, const UINT PulseLength, const UINT AnalogOut, const UINT Number);
	N_SET_N_PIXEL_FP n_set_n_pixel;
	typedef void (__stdcall *N_SET_PIXEL_FP)(const UINT CardNo, const UINT PulseLength, const UINT AnalogOut);
	N_SET_PIXEL_FP n_set_pixel;
	typedef void (__stdcall *N_RS232_WRITE_TEXT_LIST_FP)(const UINT CardNo, const char* pData);
	N_RS232_WRITE_TEXT_LIST_FP n_rs232_write_text_list;
	typedef void (__stdcall *N_SET_MCBSP_OUT_FP)(const UINT CardNo, const UINT Signal1, const UINT Signal2);
	N_SET_MCBSP_OUT_FP n_set_mcbsp_out;
	typedef void (__stdcall *N_CAMMING_FP)(const UINT CardNo, const UINT FirstPos, const UINT NPos, const UINT No, const UINT Ctrl, const double Scale, const UINT Code);
	N_CAMMING_FP n_camming;
	typedef void (__stdcall *N_PERIODIC_TOGGLE_LIST_FP)(const UINT CardNo, const UINT Port, const UINT Mask, const UINT P1, const UINT P2, const UINT Count, const UINT Start);
	N_PERIODIC_TOGGLE_LIST_FP n_periodic_toggle_list;
	typedef void (__stdcall *N_MICRO_VECTOR_ABS_3D_FP)(const UINT CardNo, const long X, const long Y, const long Z, const long LasOn, const long LasOf);
	N_MICRO_VECTOR_ABS_3D_FP n_micro_vector_abs_3d;
	typedef void (__stdcall *N_MICRO_VECTOR_REL_3D_FP)(const UINT CardNo, const long dX, const long dY, const long dZ, const long LasOn, const long LasOf);
	N_MICRO_VECTOR_REL_3D_FP n_micro_vector_rel_3d;
	typedef void (__stdcall *N_MICRO_VECTOR_ABS_FP)(const UINT CardNo, const long X, const long Y, const long LasOn, const long LasOf);
	N_MICRO_VECTOR_ABS_FP n_micro_vector_abs;
	typedef void (__stdcall *N_MICRO_VECTOR_REL_FP)(const UINT CardNo, const long dX, const long dY, const long LasOn, const long LasOf);
	N_MICRO_VECTOR_REL_FP n_micro_vector_rel;
	typedef void (__stdcall *N_MICRO_VECTOR_QUAD_AXIS_FP)(const UINT CardNo, const long X0, const long Y0, const double X1, const double Y1, const long LasOn, const long LasOff, const UINT Power, const UINT Port, const UINT Flags);
	N_MICRO_VECTOR_QUAD_AXIS_FP n_micro_vector_quad_axis;
	typedef void (__stdcall *N_MICRO_VECTOR_SET_POSITION_FP)(const UINT CardNo, const long X0, const long Y0, const long X1, const long Y1, const long LasOn, const long LasOf);
	N_MICRO_VECTOR_SET_POSITION_FP n_micro_vector_set_position;
	typedef void (__stdcall *N_SET_FREE_VARIABLE_LIST_FP)(const UINT CardNo, const UINT VarNo, const UINT Value);
	N_SET_FREE_VARIABLE_LIST_FP n_set_free_variable_list;
	typedef void (__stdcall *N_CONTROL_COMMAND_LIST_FP)(const UINT CardNo, const UINT Head, const UINT Axis, const UINT Data);
	N_CONTROL_COMMAND_LIST_FP n_control_command_list;
	typedef void (__stdcall *N_JUMP_ABS_DRILL_FP)(const UINT CardNo, const long X, const long Y, const UINT DrillTime);
	N_JUMP_ABS_DRILL_FP n_jump_abs_drill;
	typedef void (__stdcall *N_JUMP_REL_DRILL_FP)(const UINT CardNo, const long dX, const long dY, const UINT DrillTime);
	N_JUMP_REL_DRILL_FP n_jump_rel_drill;
	typedef void (__stdcall *SAVE_AND_RESTART_TIMER_FP)(void);
	SAVE_AND_RESTART_TIMER_FP save_and_restart_timer;
	typedef void (__stdcall *SET_WOBBEL_FP)(const UINT Transversal, const UINT Longitudinal, const double Freq);
	SET_WOBBEL_FP set_wobbel;
	typedef void (__stdcall *SET_WOBBEL_MODE_FP)(const UINT Transversal, const UINT Longitudinal, const double Freq, const long Mode);
	SET_WOBBEL_MODE_FP set_wobbel_mode;
	typedef void (__stdcall *SET_WOBBEL_DIRECTION_FP)(const long dX, const long dY);
	SET_WOBBEL_DIRECTION_FP set_wobbel_direction;
	typedef void (__stdcall *SET_WOBBEL_CONTROL_FP)(const UINT Ctrl, const UINT Value, const UINT MinValue, const UINT MaxValue);
	SET_WOBBEL_CONTROL_FP set_wobbel_control;
	typedef void (__stdcall *SET_WOBBEL_VECTOR_FP)(const double dTrans, const double dLong, const UINT Period, const double dPower);
	SET_WOBBEL_VECTOR_FP set_wobbel_vector;
	typedef void (__stdcall *SET_WOBBEL_OFFSET_FP)(const long OffsetTrans, const long OffsetLong);
	SET_WOBBEL_OFFSET_FP set_wobbel_offset;
	typedef void (__stdcall *SET_TRIGGER_FP)(const UINT Period, const UINT Signal1, const UINT Signal2);
	SET_TRIGGER_FP set_trigger;
	typedef void (__stdcall *SET_TRIGGER4_FP)(const UINT Period, const UINT Signal1, const UINT Signal2, const UINT Signal3, const UINT Signal4);
	SET_TRIGGER4_FP set_trigger4;
	typedef void (__stdcall *SET_PIXEL_LINE_3D_FP)(const UINT Channel, const UINT HalfPeriod, const double dX, const double dY, const double dZ);
	SET_PIXEL_LINE_3D_FP set_pixel_line_3d;
	typedef void (__stdcall *SET_PIXEL_LINE_FP)(const UINT Channel, const UINT HalfPeriod, const double dX, const double dY);
	SET_PIXEL_LINE_FP set_pixel_line;
	typedef void (__stdcall *SET_N_PIXEL_FP)(const UINT PulseLength, const UINT AnalogOut, const UINT Number);
	SET_N_PIXEL_FP set_n_pixel;
	typedef void (__stdcall *SET_PIXEL_FP)(const UINT PulseLength, const UINT AnalogOut);
	SET_PIXEL_FP set_pixel;
	typedef void (__stdcall *RS232_WRITE_TEXT_LIST_FP)(const char* pData);
	RS232_WRITE_TEXT_LIST_FP rs232_write_text_list;
	typedef void (__stdcall *SET_MCBSP_OUT_FP)(const UINT Signal1, const UINT Signal2);
	SET_MCBSP_OUT_FP set_mcbsp_out;
	typedef void (__stdcall *CAMMING_FP)(const UINT FirstPos, const UINT NPos, const UINT No, const UINT Ctrl, const double Scale, const UINT Code);
	CAMMING_FP camming;
	typedef void (__stdcall *PERIODIC_TOGGLE_LIST_FP)(const UINT Port, const UINT Mask, const UINT P1, const UINT P2, const UINT Count, const UINT Start);
	PERIODIC_TOGGLE_LIST_FP periodic_toggle_list;
	typedef void (__stdcall *MICRO_VECTOR_ABS_3D_FP)(const long X, const long Y, const long Z, const long LasOn, const long LasOf);
	MICRO_VECTOR_ABS_3D_FP micro_vector_abs_3d;
	typedef void (__stdcall *MICRO_VECTOR_REL_3D_FP)(const long dX, const long dY, const long dZ, const long LasOn, const long LasOf);
	MICRO_VECTOR_REL_3D_FP micro_vector_rel_3d;
	typedef void (__stdcall *MICRO_VECTOR_ABS_FP)(const long X, const long Y, const long LasOn, const long LasOf);
	MICRO_VECTOR_ABS_FP micro_vector_abs;
	typedef void (__stdcall *MICRO_VECTOR_REL_FP)(const long dX, const long dY, const long LasOn, const long LasOf);
	MICRO_VECTOR_REL_FP micro_vector_rel;
	typedef void (__stdcall *MICRO_VECTOR_QUAD_AXIS_FP)(const long X0, const long Y0, const double X1, const double Y1, const long LasOn, const long LasOff, const UINT Power, const UINT Port, const UINT Flags);
	MICRO_VECTOR_QUAD_AXIS_FP micro_vector_quad_axis;
	typedef void (__stdcall *MICRO_VECTOR_SET_POSITION_FP)(const long X0, const long Y0, const long X1, const long Y1, const long LasOn, const long LasOf);
	MICRO_VECTOR_SET_POSITION_FP micro_vector_set_position;
	typedef void (__stdcall *MULTI_AXIS_FLAGS_FP)(const UINT Flags);
	MULTI_AXIS_FLAGS_FP multi_axis_flags;
	typedef void (__stdcall *SET_FREE_VARIABLE_LIST_FP)(const UINT VarNo, const UINT Value);
	SET_FREE_VARIABLE_LIST_FP set_free_variable_list;
	typedef void (__stdcall *CONTROL_COMMAND_LIST_FP)(const UINT Head, const UINT Axis, const UINT Data);
	CONTROL_COMMAND_LIST_FP control_command_list;
	typedef void (__stdcall *JUMP_ABS_DRILL_FP)(const long X, const long Y, const UINT DrillTime);
	JUMP_ABS_DRILL_FP jump_abs_drill;
	typedef void (__stdcall *JUMP_REL_DRILL_FP)(const long dX, const long dY, const UINT DrillTime);
	JUMP_REL_DRILL_FP jump_rel_drill;
	typedef void (__stdcall *N_TIMED_MARK_ABS_3D_FP)(const UINT CardNo, const long X, const long Y, const long Z, const double T);
	N_TIMED_MARK_ABS_3D_FP n_timed_mark_abs_3d;
	typedef void (__stdcall *N_TIMED_MARK_REL_3D_FP)(const UINT CardNo, const long dX, const long dY, const long dZ, const double T);
	N_TIMED_MARK_REL_3D_FP n_timed_mark_rel_3d;
	typedef void (__stdcall *N_TIMED_MARK_ABS_FP)(const UINT CardNo, const long X, const long Y, const double T);
	N_TIMED_MARK_ABS_FP n_timed_mark_abs;
	typedef void (__stdcall *N_TIMED_MARK_REL_FP)(const UINT CardNo, const long dX, const long dY, const double T);
	N_TIMED_MARK_REL_FP n_timed_mark_rel;
	typedef void (__stdcall *TIMED_MARK_ABS_3D_FP)(const long X, const long Y, const long Z, const double T);
	TIMED_MARK_ABS_3D_FP timed_mark_abs_3d;
	typedef void (__stdcall *TIMED_MARK_REL_3D_FP)(const long dX, const long dY, const long dZ, const double T);
	TIMED_MARK_REL_3D_FP timed_mark_rel_3d;
	typedef void (__stdcall *TIMED_MARK_ABS_FP)(const long X, const long Y, const double T);
	TIMED_MARK_ABS_FP timed_mark_abs;
	typedef void (__stdcall *TIMED_MARK_REL_FP)(const long dX, const long dY, const double T);
	TIMED_MARK_REL_FP timed_mark_rel;
	typedef void (__stdcall *N_MARK_ABS_3D_FP)(const UINT CardNo, const long X, const long Y, const long Z);
	N_MARK_ABS_3D_FP n_mark_abs_3d;
	typedef void (__stdcall *N_MARK_REL_3D_FP)(const UINT CardNo, const long dX, const long dY, const long dZ);
	N_MARK_REL_3D_FP n_mark_rel_3d;
	typedef void (__stdcall *N_MARK_ABS_FP)(const UINT CardNo, const long X, const long Y);
	N_MARK_ABS_FP n_mark_abs;
	typedef void (__stdcall *N_MARK_REL_FP)(const UINT CardNo, const long dX, const long dY);
	N_MARK_REL_FP n_mark_rel;
	typedef void (__stdcall *MARK_ABS_3D_FP)(const long X, const long Y, const long Z);
	MARK_ABS_3D_FP mark_abs_3d;
	typedef void (__stdcall *MARK_REL_3D_FP)(const long dX, const long dY, const long dZ);
	MARK_REL_3D_FP mark_rel_3d;
	typedef void (__stdcall *MARK_ABS_FP)(const long X, const long Y);
	MARK_ABS_FP mark_abs;
	typedef void (__stdcall *MARK_REL_FP)(const long dX, const long dY);
	MARK_REL_FP mark_rel;
	typedef void (__stdcall *N_TIMED_JUMP_ABS_3D_FP)(const UINT CardNo, const long X, const long Y, const long Z, const double T);
	N_TIMED_JUMP_ABS_3D_FP n_timed_jump_abs_3d;
	typedef void (__stdcall *N_TIMED_JUMP_REL_3D_FP)(const UINT CardNo, const long dX, const long dY, const long dZ, const double T);
	N_TIMED_JUMP_REL_3D_FP n_timed_jump_rel_3d;
	typedef void (__stdcall *N_TIMED_JUMP_ABS_FP)(const UINT CardNo, const long X, const long Y, const double T);
	N_TIMED_JUMP_ABS_FP n_timed_jump_abs;
	typedef void (__stdcall *N_TIMED_JUMP_REL_FP)(const UINT CardNo, const long dX, const long dY, const double T);
	N_TIMED_JUMP_REL_FP n_timed_jump_rel;
	typedef void (__stdcall *TIMED_JUMP_ABS_3D_FP)(const long X, const long Y, const long Z, const double T);
	TIMED_JUMP_ABS_3D_FP timed_jump_abs_3d;
	typedef void (__stdcall *TIMED_JUMP_REL_3D_FP)(const long dX, const long dY, const long dZ, const double T);
	TIMED_JUMP_REL_3D_FP timed_jump_rel_3d;
	typedef void (__stdcall *TIMED_JUMP_ABS_FP)(const long X, const long Y, const double T);
	TIMED_JUMP_ABS_FP timed_jump_abs;
	typedef void (__stdcall *TIMED_JUMP_REL_FP)(const long dX, const long dY, const double T);
	TIMED_JUMP_REL_FP timed_jump_rel;
	typedef void (__stdcall *N_JUMP_ABS_3D_FP)(const UINT CardNo, const long X, const long Y, const long Z);
	N_JUMP_ABS_3D_FP n_jump_abs_3d;
	typedef void (__stdcall *N_JUMP_REL_3D_FP)(const UINT CardNo, const long dX, const long dY, const long dZ);
	N_JUMP_REL_3D_FP n_jump_rel_3d;
	typedef void (__stdcall *N_JUMP_ABS_FP)(const UINT CardNo, const long X, const long Y);
	N_JUMP_ABS_FP n_jump_abs;
	typedef void (__stdcall *N_JUMP_REL_FP)(const UINT CardNo, const long dX, const long dY);
	N_JUMP_REL_FP n_jump_rel;
	typedef void (__stdcall *JUMP_ABS_3D_FP)(const long X, const long Y, const long Z);
	JUMP_ABS_3D_FP jump_abs_3d;
	typedef void (__stdcall *JUMP_REL_3D_FP)(const long dX, const long dY, const long dZ);
	JUMP_REL_3D_FP jump_rel_3d;
	typedef void (__stdcall *JUMP_ABS_FP)(const long X, const long Y);
	JUMP_ABS_FP jump_abs;
	typedef void (__stdcall *JUMP_REL_FP)(const long dX, const long dY);
	JUMP_REL_FP jump_rel;
	typedef void (__stdcall *N_PARA_MARK_ABS_3D_FP)(const UINT CardNo, const long X, const long Y, const long Z, const UINT P);
	N_PARA_MARK_ABS_3D_FP n_para_mark_abs_3d;
	typedef void (__stdcall *N_PARA_MARK_REL_3D_FP)(const UINT CardNo, const long dX, const long dY, const long dZ, const UINT P);
	N_PARA_MARK_REL_3D_FP n_para_mark_rel_3d;
	typedef void (__stdcall *N_PARA_MARK_ABS_FP)(const UINT CardNo, const long X, const long Y, const UINT P);
	N_PARA_MARK_ABS_FP n_para_mark_abs;
	typedef void (__stdcall *N_PARA_MARK_REL_FP)(const UINT CardNo, const long dX, const long dY, const UINT P);
	N_PARA_MARK_REL_FP n_para_mark_rel;
	typedef void (__stdcall *PARA_MARK_ABS_3D_FP)(const long X, const long Y, const long Z, const UINT P);
	PARA_MARK_ABS_3D_FP para_mark_abs_3d;
	typedef void (__stdcall *PARA_MARK_REL_3D_FP)(const long dX, const long dY, const long dZ, const UINT P);
	PARA_MARK_REL_3D_FP para_mark_rel_3d;
	typedef void (__stdcall *PARA_MARK_ABS_FP)(const long X, const long Y, const UINT P);
	PARA_MARK_ABS_FP para_mark_abs;
	typedef void (__stdcall *PARA_MARK_REL_FP)(const long dX, const long dY, const UINT P);
	PARA_MARK_REL_FP para_mark_rel;
	typedef void (__stdcall *N_PARA_JUMP_ABS_3D_FP)(const UINT CardNo, const long X, const long Y, const long Z, const UINT P);
	N_PARA_JUMP_ABS_3D_FP n_para_jump_abs_3d;
	typedef void (__stdcall *N_PARA_JUMP_REL_3D_FP)(const UINT CardNo, const long dX, const long dY, const long dZ, const UINT P);
	N_PARA_JUMP_REL_3D_FP n_para_jump_rel_3d;
	typedef void (__stdcall *N_PARA_JUMP_ABS_FP)(const UINT CardNo, const long X, const long Y, const UINT P);
	N_PARA_JUMP_ABS_FP n_para_jump_abs;
	typedef void (__stdcall *N_PARA_JUMP_REL_FP)(const UINT CardNo, const long dX, const long dY, const UINT P);
	N_PARA_JUMP_REL_FP n_para_jump_rel;
	typedef void (__stdcall *PARA_JUMP_ABS_3D_FP)(const long X, const long Y, const long Z, const UINT P);
	PARA_JUMP_ABS_3D_FP para_jump_abs_3d;
	typedef void (__stdcall *PARA_JUMP_REL_3D_FP)(const long dX, const long dY, const long dZ, const UINT P);
	PARA_JUMP_REL_3D_FP para_jump_rel_3d;
	typedef void (__stdcall *PARA_JUMP_ABS_FP)(const long X, const long Y, const UINT P);
	PARA_JUMP_ABS_FP para_jump_abs;
	typedef void (__stdcall *PARA_JUMP_REL_FP)(const long dX, const long dY, const UINT P);
	PARA_JUMP_REL_FP para_jump_rel;
	typedef void (__stdcall *N_TIMED_PARA_MARK_ABS_3D_FP)(const UINT CardNo, const long X, const long Y, const long Z, const UINT P, const double T);
	N_TIMED_PARA_MARK_ABS_3D_FP n_timed_para_mark_abs_3d;
	typedef void (__stdcall *N_TIMED_PARA_MARK_REL_3D_FP)(const UINT CardNo, const long dX, const long dY, const long dZ, const UINT P, const double T);
	N_TIMED_PARA_MARK_REL_3D_FP n_timed_para_mark_rel_3d;
	typedef void (__stdcall *N_TIMED_PARA_JUMP_ABS_3D_FP)(const UINT CardNo, const long X, const long Y, const long Z, const UINT P, const double T);
	N_TIMED_PARA_JUMP_ABS_3D_FP n_timed_para_jump_abs_3d;
	typedef void (__stdcall *N_TIMED_PARA_JUMP_REL_3D_FP)(const UINT CardNo, const long dX, const long dY, const long dZ, const UINT P, const double T);
	N_TIMED_PARA_JUMP_REL_3D_FP n_timed_para_jump_rel_3d;
	typedef void (__stdcall *N_TIMED_PARA_MARK_ABS_FP)(const UINT CardNo, const long X, const long Y, const UINT P, const double T);
	N_TIMED_PARA_MARK_ABS_FP n_timed_para_mark_abs;
	typedef void (__stdcall *N_TIMED_PARA_MARK_REL_FP)(const UINT CardNo, const long dX, const long dY, const UINT P, const double T);
	N_TIMED_PARA_MARK_REL_FP n_timed_para_mark_rel;
	typedef void (__stdcall *N_TIMED_PARA_JUMP_ABS_FP)(const UINT CardNo, const long X, const long Y, const UINT P, const double T);
	N_TIMED_PARA_JUMP_ABS_FP n_timed_para_jump_abs;
	typedef void (__stdcall *N_TIMED_PARA_JUMP_REL_FP)(const UINT CardNo, const long dX, const long dY, const UINT P, const double T);
	N_TIMED_PARA_JUMP_REL_FP n_timed_para_jump_rel;
	typedef void (__stdcall *TIMED_PARA_MARK_ABS_3D_FP)(const long X, const long Y, const long Z, const UINT P, const double T);
	TIMED_PARA_MARK_ABS_3D_FP timed_para_mark_abs_3d;
	typedef void (__stdcall *TIMED_PARA_MARK_REL_3D_FP)(const long dX, const long dY, const long dZ, const UINT P, const double T);
	TIMED_PARA_MARK_REL_3D_FP timed_para_mark_rel_3d;
	typedef void (__stdcall *TIMED_PARA_JUMP_ABS_3D_FP)(const long X, const long Y, const long Z, const UINT P, const double T);
	TIMED_PARA_JUMP_ABS_3D_FP timed_para_jump_abs_3d;
	typedef void (__stdcall *TIMED_PARA_JUMP_REL_3D_FP)(const long dX, const long dY, const long dZ, const UINT P, const double T);
	TIMED_PARA_JUMP_REL_3D_FP timed_para_jump_rel_3d;
	typedef void (__stdcall *TIMED_PARA_MARK_ABS_FP)(const long X, const long Y, const UINT P, const double T);
	TIMED_PARA_MARK_ABS_FP timed_para_mark_abs;
	typedef void (__stdcall *TIMED_PARA_MARK_REL_FP)(const long dX, const long dY, const UINT P, const double T);
	TIMED_PARA_MARK_REL_FP timed_para_mark_rel;
	typedef void (__stdcall *TIMED_PARA_JUMP_ABS_FP)(const long X, const long Y, const UINT P, const double T);
	TIMED_PARA_JUMP_ABS_FP timed_para_jump_abs;
	typedef void (__stdcall *TIMED_PARA_JUMP_REL_FP)(const long dX, const long dY, const UINT P, const double T);
	TIMED_PARA_JUMP_REL_FP timed_para_jump_rel;
	typedef void (__stdcall *N_SET_DEFOCUS_LIST_FP)(const UINT CardNo, const long Shift);
	N_SET_DEFOCUS_LIST_FP n_set_defocus_list;
	typedef void (__stdcall *N_SET_ZOOM_LIST_FP)(const UINT CardNo, const UINT Zoom);
	N_SET_ZOOM_LIST_FP n_set_zoom_list;
	typedef void (__stdcall *SET_DEFOCUS_LIST_FP)(const long Shift);
	SET_DEFOCUS_LIST_FP set_defocus_list;
	typedef void (__stdcall *SET_ZOOM_LIST_FP)(const UINT Zoom);
	SET_ZOOM_LIST_FP set_zoom_list;
	typedef void (__stdcall *N_TIMED_ARC_ABS_FP)(const UINT CardNo, const long X, const long Y, const double Angle, const double T);
	N_TIMED_ARC_ABS_FP n_timed_arc_abs;
	typedef void (__stdcall *N_TIMED_ARC_REL_FP)(const UINT CardNo, const long dX, const long dY, const double Angle, const double T);
	N_TIMED_ARC_REL_FP n_timed_arc_rel;
	typedef void (__stdcall *TIMED_ARC_ABS_FP)(const long X, const long Y, const double Angle, const double T);
	TIMED_ARC_ABS_FP timed_arc_abs;
	typedef void (__stdcall *TIMED_ARC_REL_FP)(const long dX, const long dY, const double Angle, const double T);
	TIMED_ARC_REL_FP timed_arc_rel;
	typedef void (__stdcall *N_ARC_ABS_3D_FP)(const UINT CardNo, const long X, const long Y, const long Z, const double Angle);
	N_ARC_ABS_3D_FP n_arc_abs_3d;
	typedef void (__stdcall *N_ARC_REL_3D_FP)(const UINT CardNo, const long dX, const long dY, const long dZ, const double Angle);
	N_ARC_REL_3D_FP n_arc_rel_3d;
	typedef void (__stdcall *N_ARC_ABS_FP)(const UINT CardNo, const long X, const long Y, const double Angle);
	N_ARC_ABS_FP n_arc_abs;
	typedef void (__stdcall *N_ARC_REL_FP)(const UINT CardNo, const long dX, const long dY, const double Angle);
	N_ARC_REL_FP n_arc_rel;
	typedef void (__stdcall *N_SET_ELLIPSE_FP)(const UINT CardNo, const UINT A, const UINT B, const double Phi0, const double Phi);
	N_SET_ELLIPSE_FP n_set_ellipse;
	typedef void (__stdcall *N_MARK_ELLIPSE_ABS_FP)(const UINT CardNo, const long X, const long Y, const double Alpha);
	N_MARK_ELLIPSE_ABS_FP n_mark_ellipse_abs;
	typedef void (__stdcall *N_MARK_ELLIPSE_REL_FP)(const UINT CardNo, const long dX, const long dY, const double Alpha);
	N_MARK_ELLIPSE_REL_FP n_mark_ellipse_rel;
	typedef void (__stdcall *ARC_ABS_3D_FP)(const long X, const long Y, const long Z, const double Angle);
	ARC_ABS_3D_FP arc_abs_3d;
	typedef void (__stdcall *ARC_REL_3D_FP)(const long dX, const long dY, const long dZ, const double Angle);
	ARC_REL_3D_FP arc_rel_3d;
	typedef void (__stdcall *ARC_ABS_FP)(const long X, const long Y, const double Angle);
	ARC_ABS_FP arc_abs;
	typedef void (__stdcall *ARC_REL_FP)(const long dX, const long dY, const double Angle);
	ARC_REL_FP arc_rel;
	typedef void (__stdcall *SET_ELLIPSE_FP)(const UINT A, const UINT B, const double Phi0, const double Phi);
	SET_ELLIPSE_FP set_ellipse;
	typedef void (__stdcall *MARK_ELLIPSE_ABS_FP)(const long X, const long Y, const double Alpha);
	MARK_ELLIPSE_ABS_FP mark_ellipse_abs;
	typedef void (__stdcall *MARK_ELLIPSE_REL_FP)(const long dX, const long dY, const double Alpha);
	MARK_ELLIPSE_REL_FP mark_ellipse_rel;
	typedef void (__stdcall *N_SET_OFFSET_XYZ_LIST_FP)(const UINT CardNo, const UINT HeadNo, const long XOffset, const long YOffset, const long ZOffset, const UINT at_once);
	N_SET_OFFSET_XYZ_LIST_FP n_set_offset_xyz_list;
	typedef void (__stdcall *N_SET_OFFSET_LIST_FP)(const UINT CardNo, const UINT HeadNo, const long XOffset, const long YOffset, const UINT at_once);
	N_SET_OFFSET_LIST_FP n_set_offset_list;
	typedef void (__stdcall *N_SET_MATRIX_LIST_FP)(const UINT CardNo, const UINT HeadNo, const UINT Ind1, const UINT Ind2, const double Mij, const UINT at_once);
	N_SET_MATRIX_LIST_FP n_set_matrix_list;
	typedef void (__stdcall *N_SET_ANGLE_LIST_FP)(const UINT CardNo, const UINT HeadNo, const double Angle, const UINT at_once);
	N_SET_ANGLE_LIST_FP n_set_angle_list;
	typedef void (__stdcall *N_SET_SCALE_LIST_FP)(const UINT CardNo, const UINT HeadNo, const double Scale, const UINT at_once);
	N_SET_SCALE_LIST_FP n_set_scale_list;
	typedef void (__stdcall *N_APPLY_MCBSP_LIST_FP)(const UINT CardNo, const UINT HeadNo, const UINT at_once);
	N_APPLY_MCBSP_LIST_FP n_apply_mcbsp_list;
	typedef void (__stdcall *SET_OFFSET_XYZ_LIST_FP)(const UINT HeadNo, const long XOffset, const long YOffset, const long ZOffset, const UINT at_once);
	SET_OFFSET_XYZ_LIST_FP set_offset_xyz_list;
	typedef void (__stdcall *SET_OFFSET_LIST_FP)(const UINT HeadNo, const long XOffset, const long YOffset, const UINT at_once);
	SET_OFFSET_LIST_FP set_offset_list;
	typedef void (__stdcall *SET_MATRIX_LIST_FP)(const UINT HeadNo, const UINT Ind1, const UINT Ind2, const double Mij, const UINT at_once);
	SET_MATRIX_LIST_FP set_matrix_list;
	typedef void (__stdcall *SET_ANGLE_LIST_FP)(const UINT HeadNo, const double Angle, const UINT at_once);
	SET_ANGLE_LIST_FP set_angle_list;
	typedef void (__stdcall *SET_SCALE_LIST_FP)(const UINT HeadNo, const double Scale, const UINT at_once);
	SET_SCALE_LIST_FP set_scale_list;
	typedef void (__stdcall *APPLY_MCBSP_LIST_FP)(const UINT HeadNo, const UINT at_once);
	APPLY_MCBSP_LIST_FP apply_mcbsp_list;
	typedef void (__stdcall *N_SET_MARK_SPEED_FP)(const UINT CardNo, const double Speed);
	N_SET_MARK_SPEED_FP n_set_mark_speed;
	typedef void (__stdcall *N_SET_JUMP_SPEED_FP)(const UINT CardNo, const double Speed);
	N_SET_JUMP_SPEED_FP n_set_jump_speed;
	typedef void (__stdcall *N_SET_SKY_WRITING_PARA_LIST_FP)(const UINT CardNo, const double Timelag, const long LaserOnShift, const UINT Nprev, const UINT Npost);
	N_SET_SKY_WRITING_PARA_LIST_FP n_set_sky_writing_para_list;
	typedef void (__stdcall *N_SET_SKY_WRITING_LIST_FP)(const UINT CardNo, const double Timelag, const long LaserOnShift);
	N_SET_SKY_WRITING_LIST_FP n_set_sky_writing_list;
	typedef void (__stdcall *N_SET_SKY_WRITING_LIMIT_LIST_FP)(const UINT CardNo, const double CosAngle);
	N_SET_SKY_WRITING_LIMIT_LIST_FP n_set_sky_writing_limit_list;
	typedef void (__stdcall *N_SET_SKY_WRITING_MODE_LIST_FP)(const UINT CardNo, const UINT Mode);
	N_SET_SKY_WRITING_MODE_LIST_FP n_set_sky_writing_mode_list;
	typedef void (__stdcall *N_SET_SCANNER_DELAYS_FP)(const UINT CardNo, const UINT Jump, const UINT Mark, const UINT Polygon);
	N_SET_SCANNER_DELAYS_FP n_set_scanner_delays;
	typedef void (__stdcall *N_SET_JUMP_MODE_LIST_FP)(const UINT CardNo, const long Flag);
	N_SET_JUMP_MODE_LIST_FP n_set_jump_mode_list;
	typedef void (__stdcall *N_ENDURING_WOBBEL_FP)(const UINT CardNo);
	N_ENDURING_WOBBEL_FP n_enduring_wobbel;
	typedef void (__stdcall *N_SET_DELAY_MODE_LIST_FP)(const UINT CardNo, const UINT VarPoly, const UINT DirectMove3D, const UINT EdgeLevel, const UINT MinJumpDelay, const UINT JumpLengthLimit);
	N_SET_DELAY_MODE_LIST_FP n_set_delay_mode_list;
	typedef void (__stdcall *SET_MARK_SPEED_FP)(const double Speed);
	SET_MARK_SPEED_FP set_mark_speed;
	typedef void (__stdcall *SET_JUMP_SPEED_FP)(const double Speed);
	SET_JUMP_SPEED_FP set_jump_speed;
	typedef void (__stdcall *SET_SKY_WRITING_PARA_LIST_FP)(const double Timelag, const long LaserOnShift, const UINT Nprev, const UINT Npost);
	SET_SKY_WRITING_PARA_LIST_FP set_sky_writing_para_list;
	typedef void (__stdcall *SET_SKY_WRITING_LIST_FP)(const double Timelag, const long LaserOnShift);
	SET_SKY_WRITING_LIST_FP set_sky_writing_list;
	typedef void (__stdcall *SET_SKY_WRITING_LIMIT_LIST_FP)(const double CosAngle);
	SET_SKY_WRITING_LIMIT_LIST_FP set_sky_writing_limit_list;
	typedef void (__stdcall *SET_SKY_WRITING_MODE_LIST_FP)(const UINT Mode);
	SET_SKY_WRITING_MODE_LIST_FP set_sky_writing_mode_list;
	typedef void (__stdcall *SET_SCANNER_DELAYS_FP)(const UINT Jump, const UINT Mark, const UINT Polygon);
	SET_SCANNER_DELAYS_FP set_scanner_delays;
	typedef void (__stdcall *SET_JUMP_MODE_LIST_FP)(const long Flag);
	SET_JUMP_MODE_LIST_FP set_jump_mode_list;
	typedef void (__stdcall *ENDURING_WOBBEL_FP)(void);
	ENDURING_WOBBEL_FP enduring_wobbel;
	typedef void (__stdcall *SET_DELAY_MODE_LIST_FP)(const UINT VarPoly, const UINT DirectMove3D, const UINT EdgeLevel, const UINT MinJumpDelay, const UINT JumpLengthLimit);
	SET_DELAY_MODE_LIST_FP set_delay_mode_list;



	typedef void (__stdcall *N_STEPPER_ENABLE_LIST_FP)(const UINT CardNo, const long Enable1, const long Enable2);
	N_STEPPER_ENABLE_LIST_FP n_stepper_enable_list;
	typedef void (__stdcall *N_STEPPER_CONTROL_LIST_FP)(const UINT CardNo, const long Period1, const long Period2);
	N_STEPPER_CONTROL_LIST_FP n_stepper_control_list;
	typedef void (__stdcall *N_STEPPER_ABS_NO_LIST_FP)(const UINT CardNo, const UINT No, const long Pos);
	N_STEPPER_ABS_NO_LIST_FP n_stepper_abs_no_list;
	typedef void (__stdcall *N_STEPPER_REL_NO_LIST_FP)(const UINT CardNo, const UINT No, const long dPos);
	N_STEPPER_REL_NO_LIST_FP n_stepper_rel_no_list;
	typedef void (__stdcall *N_STEPPER_ABS_LIST_FP)(const UINT CardNo, const long Pos1, const long Pos2);
	N_STEPPER_ABS_LIST_FP n_stepper_abs_list;
	typedef void (__stdcall *N_STEPPER_REL_LIST_FP)(const UINT CardNo, const long dPos1, const long dPos2);
	N_STEPPER_REL_LIST_FP n_stepper_rel_list;
	typedef void (__stdcall *N_STEPPER_WAIT_FP)(const UINT CardNo, const UINT No);
	N_STEPPER_WAIT_FP n_stepper_wait;
	typedef void (__stdcall *STEPPER_ENABLE_LIST_FP)(const long Enable1, const long Enable2);
	STEPPER_ENABLE_LIST_FP stepper_enable_list;
	typedef void (__stdcall *STEPPER_CONTROL_LIST_FP)(const long Period1, const long Period2);
	STEPPER_CONTROL_LIST_FP stepper_control_list;
	typedef void (__stdcall *STEPPER_ABS_NO_LIST_FP)(const UINT No, const long Pos);
	STEPPER_ABS_NO_LIST_FP stepper_abs_no_list;
	typedef void (__stdcall *STEPPER_REL_NO_LIST_FP)(const UINT No, const long dPos);
	STEPPER_REL_NO_LIST_FP stepper_rel_no_list;
	typedef void (__stdcall *STEPPER_ABS_LIST_FP)(const long Pos1, const long Pos2);
	STEPPER_ABS_LIST_FP stepper_abs_list;
	typedef void (__stdcall *STEPPER_REL_LIST_FP)(const long dPos1, const long dPos2);
	STEPPER_REL_LIST_FP stepper_rel_list;
	typedef void (__stdcall *STEPPER_WAIT_FP)(const UINT No);
	STEPPER_WAIT_FP stepper_wait;
	*/
};

#endif // !defined(AFX_GALVOSETTINGS_H__5FD94C31_2552_414E_9C4C_E085E12470EC__INCLUDED_3)

